import{E as e}from"./index-BOTDIo30.js";const p=Object.freeze({displayName:"C#",name:"csharp",patterns:[{include:"#preprocessor"},{include:"#comment"},{include:"#directives"},{include:"#declarations"},{include:"#script-top-level"}],repository:{"accessor-getter":{patterns:[{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},contentName:"meta.accessor.getter.cs",end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#statement"}]},{include:"#accessor-getter-expression"},{include:"#punctuation-semicolon"}]},"accessor-getter-expression":{begin:new RegExp("=>","dgv"),beginCaptures:{0:{name:"keyword.operator.arrow.cs"}},contentName:"meta.accessor.getter.cs",end:new RegExp("(?=[\\;\\}])","dgv"),patterns:[{include:"#ref-modifier"},{include:"#expression"}]},"accessor-setter":{patterns:[{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},contentName:"meta.accessor.setter.cs",end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#statement"}]},{begin:new RegExp("=>","dgv"),beginCaptures:{0:{name:"keyword.operator.arrow.cs"}},contentName:"meta.accessor.setter.cs",end:new RegExp("(?=[\\;\\}])","dgv"),patterns:[{include:"#ref-modifier"},{include:"#expression"}]},{include:"#punctuation-semicolon"}]},"anonymous-method-expression":{patterns:[{begin:new RegExp("((?:\\b(?:async|static)\\b\\p{space}*)*)(?:(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\b|(\\()(?<tuple>(?:[^\\(\\)]|\\((?:(?:[^\\(\\)]|\\((?:(?:[^\\(\\)]|\\((?:(?:[^\\(\\)]|\\((?:(?:[^\\(\\)]|\\((?:)\\))*)\\))*)\\))*)\\))*)\\))*)(\\)))\\p{space}*(=>)","dgv"),beginCaptures:{1:{patterns:[{match:new RegExp("async|static","dgv"),name:"storage.modifier.$0.cs"}]},2:{name:"entity.name.variable.parameter.cs"},3:{name:"punctuation.parenthesis.open.cs"},4:{patterns:[{include:"#comment"},{include:"#explicit-anonymous-function-parameter"},{include:"#implicit-anonymous-function-parameter"},{include:"#default-argument"},{include:"#punctuation-comma"}]},5:{name:"punctuation.parenthesis.close.cs"},6:{name:"keyword.operator.arrow.cs"}},end:new RegExp("(?=[\\,\\;\\)\\}])","dgv"),patterns:[{include:"#intrusive"},{begin:new RegExp("(?=\\{)","dgv"),end:new RegExp("(?=[\\,\\;\\)\\}])","dgv"),patterns:[{include:"#block"},{include:"#intrusive"}]},{begin:new RegExp("\\b(ref)\\b|(?=\\P{space})","dgv"),beginCaptures:{1:{name:"storage.modifier.ref.cs"}},end:new RegExp("(?=[\\,\\;\\)\\}])","dgv"),patterns:[{include:"#expression"}]}]},{begin:new RegExp("((?:\\b(?:async|static)\\b\\p{space}*)*)\\b(delegate)\\b\\p{space}*","dgv"),beginCaptures:{1:{patterns:[{match:new RegExp("async|static","dgv"),name:"storage.modifier.$0.cs"}]},2:{name:"storage.type.delegate.cs"}},end:new RegExp("(?<=\\})|(?=[\\,\\;\\)\\}])","dgv"),patterns:[{include:"#intrusive"},{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#intrusive"},{include:"#explicit-anonymous-function-parameter"},{include:"#punctuation-comma"}]},{include:"#block"}]}]},"anonymous-object-creation-expression":{begin:new RegExp("\\b(new)\\b\\p{space}*(?=\\{|\\/\\/|\\/\\*|(?=\\n?$))","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.new.cs"}},end:new RegExp("(?<=\\})","dgv"),patterns:[{include:"#comment"},{include:"#initializer-expression"}]},argument:{patterns:[{match:new RegExp("\\b(ref|in)\\b","dgv"),name:"storage.modifier.$1.cs"},{begin:new RegExp("\\b(out)\\b","dgv"),beginCaptures:{1:{name:"storage.modifier.out.cs"}},end:new RegExp("(?=[\\,\\)\\]])","dgv"),patterns:[{include:"#declaration-expression-local"},{include:"#expression"}]},{include:"#expression"}]},"argument-list":{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#named-argument"},{include:"#argument"},{include:"#punctuation-comma"}]},"array-creation-expression":{begin:new e("\\b(new|stackalloc)\\b\\p{space}*(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)?\\p{space}*(?=\\[)","dgv",{hiddenCaptures:[5,7,8,9],transfers:[[3,[5,8]],[4,[7]],[6,[9]]]}),beginCaptures:{1:{name:"keyword.operator.expression.$1.cs"},2:{patterns:[{include:"#type"}]}},end:new RegExp("(?<=\\])","dgv"),patterns:[{include:"#bracketed-argument-list"}]},"as-expression":{captures:{1:{name:"keyword.operator.expression.as.cs"},2:{patterns:[{include:"#type"}]}},match:new e("(?<!\\.)\\b(as)\\b\\p{space}*(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?(?!\\?))?(?:\\p{space}*\\[\\p{space}*(?:,\\p{space}*)*\\](?:\\p{space}*\\?(?!\\?))?)*)?","dgv",{hiddenCaptures:[5,7,8,9],transfers:[[3,[5,8]],[4,[7]],[6,[9]]]})},"assignment-expression":{begin:new RegExp("(?:[\\*\\/\\%\\+\\-]|\\?\\?|[\\&\\^]|<<|>>>?|\\|)?=(?![\\=\\>])","dgv"),beginCaptures:{0:{patterns:[{include:"#assignment-operators"}]}},end:new RegExp("(?=[\\,\\)\\]\\;\\}])","dgv"),patterns:[{include:"#ref-modifier"},{include:"#expression"}]},"assignment-operators":{patterns:[{match:new RegExp("\\*=|\\/=|%=|\\+=|-=|\\?\\?=","dgv"),name:"keyword.operator.assignment.compound.cs"},{match:new RegExp("&=|\\^=|<<=|>>>?=|\\|=","dgv"),name:"keyword.operator.assignment.compound.bitwise.cs"},{match:new RegExp("=","dgv"),name:"keyword.operator.assignment.cs"}]},attribute:{patterns:[{include:"#type-name"},{include:"#type-arguments"},{include:"#attribute-arguments"}]},"attribute-arguments":{begin:new RegExp("(\\()","dgv"),beginCaptures:{1:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("(\\))","dgv"),endCaptures:{1:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#attribute-named-argument"},{include:"#expression"},{include:"#punctuation-comma"}]},"attribute-named-argument":{begin:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?==)","dgv"),beginCaptures:{1:{name:"entity.name.variable.property.cs"}},end:new RegExp("(?=([\\,\\)]))","dgv"),patterns:[{include:"#operator-assignment"},{include:"#expression"}]},"attribute-section":{begin:new RegExp("(\\[)(assembly|module|field|event|method|param|property|return|type)?(:)?","dgv"),beginCaptures:{1:{name:"punctuation.squarebracket.open.cs"},2:{name:"keyword.other.attribute-specifier.cs"},3:{name:"punctuation.separator.colon.cs"}},end:new RegExp("(\\])","dgv"),endCaptures:{1:{name:"punctuation.squarebracket.close.cs"}},patterns:[{include:"#comment"},{include:"#attribute"},{include:"#punctuation-comma"}]},"await-expression":{match:new RegExp("(?<!\\.\\p{space}*)\\b(await)\\b","dgv"),name:"keyword.operator.expression.await.cs"},"await-statement":{begin:new RegExp("(?<!\\.\\p{space}*)\\b(await)\\b","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.await.cs"}},end:new RegExp("(?<=\\})|(?=[\\;\\}])","dgv"),patterns:[{include:"#foreach-statement"},{include:"#using-statement"},{include:"#expression"}]},"base-types":{begin:new RegExp(":","dgv"),beginCaptures:{0:{name:"punctuation.separator.colon.cs"}},end:new RegExp("(?=\\{|where|;)","dgv"),patterns:[{include:"#type"},{include:"#punctuation-comma"},{include:"#preprocessor"}]},block:{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#statement"}]},"boolean-literal":{patterns:[{match:new RegExp("(?<!\\.)\\btrue\\b","dgv"),name:"constant.language.boolean.true.cs"},{match:new RegExp("(?<!\\.)\\bfalse\\b","dgv"),name:"constant.language.boolean.false.cs"}]},"bracketed-argument-list":{begin:new RegExp("\\[","dgv"),beginCaptures:{0:{name:"punctuation.squarebracket.open.cs"}},end:new RegExp("\\]","dgv"),endCaptures:{0:{name:"punctuation.squarebracket.close.cs"}},patterns:[{include:"#named-argument"},{include:"#argument"},{include:"#punctuation-comma"}]},"bracketed-parameter-list":{begin:new RegExp("(?=(\\[))","dgv"),beginCaptures:{1:{name:"punctuation.squarebracket.open.cs"}},end:new RegExp("(?=(\\]))","dgv"),endCaptures:{1:{name:"punctuation.squarebracket.close.cs"}},patterns:[{begin:new RegExp("(?<=\\[)","dgv"),end:new RegExp("(?=\\])","dgv"),patterns:[{include:"#comment"},{include:"#attribute-section"},{include:"#parameter"},{include:"#punctuation-comma"},{include:"#variable-initializer"}]}]},"break-or-continue-statement":{match:new RegExp("(?<!\\.)\\b(break|continue)\\b","dgv"),name:"keyword.control.flow.$1.cs"},"case-guard":{patterns:[{include:"#parenthesized-expression"},{include:"#expression"}]},"cast-expression":{captures:{1:{name:"punctuation.parenthesis.open.cs"},2:{patterns:[{include:"#type"}]},7:{name:"punctuation.parenthesis.close.cs"}},match:new e("(\\()\\p{space}*(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}*(\\))(?=\\p{space}*-*!*@?[_\\p{Alpha}\\p{Nd}\\(])","dgv",{hiddenCaptures:[5,7,8,9],transfers:[[3,[5,8]],[4,[7]],[6,[9]]]})},"casted-constant-pattern":{begin:new RegExp(`(\\()([\\p{space}\\.\\:\\@_\\p{Alpha}\\p{Nd}]+)(\\))(?=[\\p{space}\\+\\-\\!\\~]*@?[_\\p{Alpha}\\p{Nd}\\('"]+)`,"dgv"),beginCaptures:{1:{name:"punctuation.parenthesis.open.cs"},2:{patterns:[{include:"#type-builtin"},{include:"#type-name"}]},3:{name:"punctuation.parenthesis.close.cs"}},end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{include:"#casted-constant-pattern"},{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#constant-pattern"}]},{include:"#constant-pattern"},{captures:{1:{name:"entity.name.type.alias.cs"},2:{name:"punctuation.separator.coloncolon.cs"}},match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(::)","dgv")},{captures:{1:{name:"entity.name.type.cs"},2:{name:"punctuation.accessor.cs"}},match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\.)","dgv")},{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"variable.other.constant.cs"}]},"catch-clause":{begin:new RegExp("(?<!\\.)\\b(catch)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.exception.catch.cs"}},end:new RegExp("(?<=\\})","dgv"),patterns:[{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{captures:{1:{patterns:[{include:"#type"}]},6:{name:"entity.name.variable.local.cs"}},match:new e("(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}*(?:((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\b)?","dgv",{hiddenCaptures:[4,6,7,8,11],transfers:[[2,[4,7,11]],[3,[6]],[5,[8]]]})}]},{include:"#when-clause"},{include:"#comment"},{include:"#block"}]},"char-character-escape":{match:new RegExp("\\\\(x\\p{AHex}{1,4}|u\\p{AHex}{4}|[^\\n])","dgv"),name:"constant.character.escape.cs"},"char-literal":{begin:new RegExp("'","dgv"),beginCaptures:{0:{name:"punctuation.definition.char.begin.cs"}},end:new RegExp("(')|([^\\\\\\n](?=\\n?$))","dgv"),endCaptures:{1:{name:"punctuation.definition.char.end.cs"},2:{name:"invalid.illegal.newline.cs"}},name:"string.quoted.single.cs",patterns:[{include:"#char-character-escape"}]},"class-declaration":{begin:new RegExp("(?=(\\brecord\\b\\p{space}+)?\\bclass\\b)","dgv"),end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{begin:new RegExp("(\\b(record)\\b\\p{space}+)?\\b(class)\\b\\p{space}+(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*","dgv"),beginCaptures:{2:{name:"storage.type.record.cs"},3:{name:"storage.type.class.cs"},4:{name:"entity.name.type.class.cs"}},end:new RegExp("(?=\\{)|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#type-parameter-list"},{include:"#parenthesized-parameter-list"},{include:"#base-types"},{include:"#generic-constraints"}]},{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#class-or-struct-members"}]},{include:"#preprocessor"},{include:"#comment"}]},"class-or-struct-members":{patterns:[{include:"#preprocessor"},{include:"#comment"},{include:"#storage-modifier"},{include:"#type-declarations"},{include:"#property-declaration"},{include:"#field-declaration"},{include:"#event-declaration"},{include:"#indexer-declaration"},{include:"#variable-initializer"},{include:"#constructor-declaration"},{include:"#destructor-declaration"},{include:"#operator-declaration"},{include:"#conversion-operator-declaration"},{include:"#method-declaration"},{include:"#attribute-section"},{include:"#punctuation-semicolon"}]},"combinator-pattern":{match:new RegExp("\\b(and|or|not)\\b","dgv"),name:"keyword.operator.expression.pattern.combinator.$1.cs"},comment:{patterns:[{begin:new RegExp("(^\\p{space}+)?(\\/\\/\\/)(?!\\/)","dgv"),captures:{1:{name:"punctuation.whitespace.comment.leading.cs"},2:{name:"punctuation.definition.comment.cs"}},name:"comment.block.documentation.cs",patterns:[{include:"#xml-doc-comment"}],while:new RegExp("^(\\p{space}*)(\\/\\/\\/)(?!\\/)","dgv")},{begin:new RegExp("(^\\p{space}+)?(\\/\\*\\*)(?!\\/)","dgv"),captures:{1:{name:"punctuation.whitespace.comment.leading.cs"},2:{name:"punctuation.definition.comment.cs"}},end:new RegExp("(^\\p{space}+)?(\\*\\/)","dgv"),name:"comment.block.documentation.cs",patterns:[{begin:new RegExp("(?=(?:(?!\\*\\/)\\p{Any})*(?=\\n?$))","dgvy"),patterns:[{include:"#xml-doc-comment"}],while:new e("^((?:(?=(\\p{space}*))\\2))(\\*(?!/))?(?=(?:(?!\\*/)\\p{Any})*(?=\\n?$))","dgv",{hiddenCaptures:[2]}),whileCaptures:{1:{name:"punctuation.whitespace.comment.leading.cs"},2:{name:"punctuation.definition.comment.cs"}}},{include:"#xml-doc-comment"}]},{begin:new RegExp("(^\\p{space}+)?(\\/\\/)[^\\n]*(?=\\n?$)","dgv"),captures:{1:{name:"punctuation.whitespace.comment.leading.cs"},2:{name:"punctuation.definition.comment.cs"}},name:"comment.line.double-slash.cs",while:new RegExp("^(\\p{space}*)(\\/\\/)[^\\n]*(?=\\n?$)","dgv")},{begin:new RegExp("\\/\\*","dgv"),captures:{0:{name:"punctuation.definition.comment.cs"}},end:new RegExp("\\*\\/","dgv"),name:"comment.block.cs"}]},"conditional-operator":{patterns:[{match:new RegExp("\\?(?!\\?|\\p{space}*[\\.\\[])","dgv"),name:"keyword.operator.conditional.question-mark.cs"},{match:new RegExp(":","dgv"),name:"keyword.operator.conditional.colon.cs"}]},"constant-pattern":{patterns:[{include:"#boolean-literal"},{include:"#null-literal"},{include:"#numeric-literal"},{include:"#char-literal"},{include:"#string-literal"},{include:"#raw-string-literal"},{include:"#verbatim-string-literal"},{include:"#type-operator-expression"},{include:"#expression-operator-expression"},{include:"#expression-operators"},{include:"#casted-constant-pattern"}]},"constructor-declaration":{begin:new RegExp("(?=@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*\\p{space}*\\()","dgv"),end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{captures:{1:{name:"entity.name.function.cs"}},match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\b","dgv")},{begin:new RegExp("(:)","dgv"),beginCaptures:{1:{name:"punctuation.separator.colon.cs"}},end:new RegExp("(?=\\{|=>)","dgv"),patterns:[{include:"#constructor-initializer"}]},{include:"#parenthesized-parameter-list"},{include:"#preprocessor"},{include:"#comment"},{include:"#expression-body"},{include:"#block"}]},"constructor-initializer":{begin:new RegExp("\\b(base|this)\\b\\p{space}*(?=\\()","dgv"),beginCaptures:{1:{name:"variable.language.$1.cs"}},end:new RegExp("(?<=\\))","dgv"),patterns:[{include:"#argument-list"}]},"context-control-paren-statement":{patterns:[{include:"#fixed-statement"},{include:"#lock-statement"},{include:"#using-statement"}]},"context-control-statement":{match:new RegExp("\\b(checked|unchecked|unsafe)\\b(?!\\p{space}*[\\@_\\p{Alpha}\\(])","dgv"),name:"keyword.control.context.$1.cs"},"conversion-operator-declaration":{begin:new e("(?<explicit_or_implicit_keyword>\\b(?:explicit|implicit))\\p{space}*(?<operator_keyword>\\boperator)\\p{space}*(?<type_name>(?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}*(?=\\()","dgv",{hiddenCaptures:[6,8,9,10],transfers:[[4,[6,9]],[5,[8]],[7,[10]]]}),beginCaptures:{1:{patterns:[{captures:{1:{name:"storage.modifier.explicit.cs"}},match:new RegExp("\\b(explicit)\\b","dgv")},{captures:{1:{name:"storage.modifier.implicit.cs"}},match:new RegExp("\\b(implicit)\\b","dgv")}]},2:{name:"storage.type.operator.cs"},3:{patterns:[{include:"#type"}]}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#parenthesized-parameter-list"},{include:"#expression-body"},{include:"#block"}]},"declaration-expression-local":{captures:{1:{name:"storage.type.var.cs"},2:{patterns:[{include:"#type"}]},7:{name:"entity.name.variable.local.cs"}},match:new e("(?:\\b(var)\\b|(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*))\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\b\\p{space}*(?=[\\,\\)\\]])","dgv",{hiddenCaptures:[5,7,8,9,12],transfers:[[3,[5,8,12]],[4,[7]],[6,[9]]]})},"declaration-expression-tuple":{captures:{1:{name:"storage.type.var.cs"},2:{patterns:[{include:"#type"}]},7:{name:"entity.name.variable.tuple-element.cs"}},match:new e("(?:\\b(var)\\b|(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*))\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\b\\p{space}*(?=[\\,\\)])","dgv",{hiddenCaptures:[5,7,8,9,12],transfers:[[3,[5,8,12]],[4,[7]],[6,[9]]]})},declarations:{patterns:[{include:"#namespace-declaration"},{include:"#type-declarations"},{include:"#punctuation-semicolon"}]},"default-argument":{begin:new RegExp("=","dgv"),beginCaptures:{0:{name:"keyword.operator.assignment.cs"}},end:new RegExp("(?=[\\,\\)])","dgv"),patterns:[{include:"#expression"}]},"default-literal-expression":{captures:{1:{name:"keyword.operator.expression.default.cs"}},match:new RegExp("\\b(default)\\b","dgv")},"delegate-declaration":{begin:new e("\\b(delegate)\\b\\p{space}+(?<type_name>(?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\p{space}*(<([^\\<\\>]+)>)?\\p{space}*(?=\\()","dgv",{hiddenCaptures:[5,7,8,9,12],transfers:[[3,[5,8,12]],[4,[7]],[6,[9]]]}),beginCaptures:{1:{name:"storage.type.delegate.cs"},2:{patterns:[{include:"#type"}]},7:{name:"entity.name.type.delegate.cs"},8:{patterns:[{include:"#type-parameter-list"}]}},end:new RegExp("(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#parenthesized-parameter-list"},{include:"#generic-constraints"}]},"designation-pattern":{patterns:[{include:"#intrusive"},{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#punctuation-comma"},{include:"#designation-pattern"}]},{include:"#simple-designation-pattern"}]},"destructor-declaration":{begin:new RegExp("(~)(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?=\\()","dgv"),beginCaptures:{1:{name:"punctuation.tilde.cs"},2:{name:"entity.name.function.cs"}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#parenthesized-parameter-list"},{include:"#expression-body"},{include:"#block"}]},directives:{patterns:[{include:"#extern-alias-directive"},{include:"#using-directive"},{include:"#attribute-section"},{include:"#punctuation-semicolon"}]},"discard-pattern":{match:new RegExp("_(?![_\\p{Alpha}\\p{Nd}])","dgv"),name:"variable.language.discard.cs"},"do-statement":{begin:new RegExp("(?<!\\.)\\b(do)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.loop.do.cs"}},end:new RegExp("(?=[\\;\\}])","dgv"),patterns:[{include:"#statement"}]},"double-raw-interpolation":{begin:new RegExp("(?<=[^\\{][^\\{]|^)(\\{*)(\\{\\{)(?=[^\\{])","dgv"),beginCaptures:{1:{name:"string.quoted.double.cs"},2:{name:"punctuation.definition.interpolation.begin.cs"}},end:new RegExp("\\}\\}","dgv"),endCaptures:{0:{name:"punctuation.definition.interpolation.end.cs"}},name:"meta.interpolation.cs",patterns:[{include:"#expression"}]},"element-access-expression":{begin:new RegExp("(?:(?:(\\?)\\p{space}*)?(\\.)\\p{space}*|(->)\\p{space}*)?(?:(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*)?(?:(\\?)\\p{space}*)?(?=\\[)","dgv"),beginCaptures:{1:{name:"keyword.operator.null-conditional.cs"},2:{name:"punctuation.accessor.cs"},3:{name:"punctuation.accessor.pointer.cs"},4:{name:"variable.other.object.property.cs"},5:{name:"keyword.operator.null-conditional.cs"}},end:new RegExp("(?<=\\])(?!\\p{space}*\\[)","dgv"),patterns:[{include:"#bracketed-argument-list"}]},"else-part":{begin:new RegExp("(?<!\\.)\\b(else)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.conditional.else.cs"}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{include:"#statement"}]},"enum-declaration":{begin:new RegExp("(?=\\benum\\b)","dgv"),end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{begin:new RegExp("(?=enum)","dgv"),end:new RegExp("(?=\\{)|(?=;)","dgv"),patterns:[{include:"#comment"},{captures:{1:{name:"storage.type.enum.cs"},2:{name:"entity.name.type.enum.cs"}},match:new RegExp("(enum)\\p{space}+(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)","dgv")},{begin:new RegExp(":","dgv"),beginCaptures:{0:{name:"punctuation.separator.colon.cs"}},end:new RegExp("(?=\\{)","dgv"),patterns:[{include:"#type"}]}]},{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#preprocessor"},{include:"#comment"},{include:"#attribute-section"},{include:"#punctuation-comma"},{begin:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),beginCaptures:{0:{name:"entity.name.variable.enum-member.cs"}},end:new RegExp("(?=([\\,\\}]))","dgv"),patterns:[{include:"#comment"},{include:"#variable-initializer"}]}]},{include:"#preprocessor"},{include:"#comment"}]},"event-accessors":{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#comment"},{include:"#attribute-section"},{begin:new RegExp("\\b(add|remove)\\b\\p{space}*(?=[\\{\\;]|=>|\\/\\/|\\/\\*|(?=\\n?$))","dgv"),beginCaptures:{1:{name:"storage.type.accessor.$1.cs"}},end:new RegExp("(?<=[\\}\\;])|(?=\\})","dgv"),patterns:[{include:"#accessor-setter"}]}]},"event-declaration":{begin:new e("\\b(event)\\b\\p{space}*(?<return_type>(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}+)(?<interface_name>((?:(?:(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}*\\.\\p{space}*)?((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\p{space}*(?=[\\{\\;\\,\\=]|//|/\\*|(?=\\n?$))","dgv",{hiddenCaptures:[6,8,9,10,13,14,15,16,17,18,19,20,21,23],transfers:[[4,[6,9,14,16,19,23]],[5,[8,15,18]],[7,[10,17,20]],[3,[13]],[11,[21]]]}),beginCaptures:{1:{name:"storage.type.event.cs"},2:{patterns:[{include:"#type"}]},8:{patterns:[{include:"#type"},{include:"#punctuation-accessor"}]},9:{name:"entity.name.variable.event.cs"}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#event-accessors"},{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.variable.event.cs"},{include:"#punctuation-comma"},{begin:new RegExp("=","dgv"),beginCaptures:{0:{name:"keyword.operator.assignment.cs"}},end:new RegExp("(?<=,)|(?=;)","dgv"),patterns:[{include:"#expression"},{include:"#punctuation-comma"}]}]},"explicit-anonymous-function-parameter":{captures:{1:{name:"storage.modifier.$1.cs"},2:{patterns:[{include:"#type"}]},7:{name:"entity.name.variable.parameter.cs"}},match:new e("(?:\\b(ref|params|out|in)\\b\\p{space}*)?(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args><(?:[^\\<\\>]|(?:<(?:[^\\<\\>]|(?:<(?:[^\\<\\>]|(?:<(?:[^\\<\\>]|(?:<(?:[^\\<\\>]|(?:))*>\\p{space}*))*>\\p{space}*))*>\\p{space}*))*>\\p{space}*))*>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(<(?:[^\\<\\>]|(?:<(?:[^\\<\\>]|(?:<(?:[^\\<\\>]|(?:<(?:[^\\<\\>]|(?:<(?:[^\\<\\>]|(?:))*>\\p{space}*))*>\\p{space}*))*>\\p{space}*))*>\\p{space}*))*>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))*\\)))*\\)))*\\)))*\\)))*\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}*\\b((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\b","dgv",{hiddenCaptures:[5,7,8,9,12],transfers:[[3,[5,8,12]],[4,[7]],[6,[9]]]})},expression:{patterns:[{include:"#preprocessor"},{include:"#comment"},{include:"#expression-operator-expression"},{include:"#type-operator-expression"},{include:"#default-literal-expression"},{include:"#throw-expression"},{include:"#raw-interpolated-string"},{include:"#interpolated-string"},{include:"#verbatim-interpolated-string"},{include:"#type-builtin"},{include:"#language-variable"},{include:"#switch-statement-or-expression"},{include:"#with-expression"},{include:"#conditional-operator"},{include:"#assignment-expression"},{include:"#expression-operators"},{include:"#await-expression"},{include:"#query-expression"},{include:"#as-expression"},{include:"#is-expression"},{include:"#anonymous-method-expression"},{include:"#object-creation-expression"},{include:"#array-creation-expression"},{include:"#anonymous-object-creation-expression"},{include:"#invocation-expression"},{include:"#member-access-expression"},{include:"#element-access-expression"},{include:"#cast-expression"},{include:"#literal"},{include:"#parenthesized-expression"},{include:"#tuple-deconstruction-assignment"},{include:"#initializer-expression"},{include:"#identifier"}]},"expression-body":{begin:new RegExp("=>","dgv"),beginCaptures:{0:{name:"keyword.operator.arrow.cs"}},end:new RegExp("(?=[\\,\\)\\;\\}])","dgv"),patterns:[{include:"#ref-modifier"},{include:"#expression"}]},"expression-operator-expression":{begin:new RegExp("\\b(checked|unchecked|nameof)\\p{space}*(\\()","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.$1.cs"},2:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#expression"}]},"expression-operators":{patterns:[{match:new RegExp("<<|>>>?","dgv"),name:"keyword.operator.bitwise.shift.cs"},{match:new RegExp("==|!=","dgv"),name:"keyword.operator.comparison.cs"},{match:new RegExp("<=|>=|[\\<\\>]","dgv"),name:"keyword.operator.relational.cs"},{match:new RegExp("!|&&|\\|\\|","dgv"),name:"keyword.operator.logical.cs"},{match:new RegExp("[\\&\\~\\^\\|]","dgv"),name:"keyword.operator.bitwise.cs"},{match:new RegExp("--","dgv"),name:"keyword.operator.decrement.cs"},{match:new RegExp("\\+\\+","dgv"),name:"keyword.operator.increment.cs"},{match:new RegExp("\\+|-(?!>)|[\\*\\/\\%]","dgv"),name:"keyword.operator.arithmetic.cs"},{match:new RegExp("\\?\\?","dgv"),name:"keyword.operator.null-coalescing.cs"},{match:new RegExp("\\.\\.","dgv"),name:"keyword.operator.range.cs"}]},"extern-alias-directive":{begin:new RegExp("\\b(extern)\\p{space}+(alias)\\b","dgv"),beginCaptures:{1:{name:"keyword.other.directive.extern.cs"},2:{name:"keyword.other.directive.alias.cs"}},end:new RegExp("(?=;)","dgv"),patterns:[{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"variable.other.alias.cs"}]},"field-declaration":{begin:new e("(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\p{space}*(?!=[\\>\\=])(?=[\\,\\;\\=]|(?=\\n?$))","dgv",{hiddenCaptures:[4,6,7,8,11],transfers:[[2,[4,7,11]],[3,[6]],[5,[8]]]}),beginCaptures:{1:{patterns:[{include:"#type"}]},6:{name:"entity.name.variable.field.cs"}},end:new RegExp("(?=;)","dgv"),patterns:[{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.variable.field.cs"},{include:"#punctuation-comma"},{include:"#comment"},{include:"#variable-initializer"},{include:"#class-or-struct-members"}]},"finally-clause":{begin:new RegExp("(?<!\\.)\\b(finally)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.exception.finally.cs"}},end:new RegExp("(?<=\\})","dgv"),patterns:[{include:"#comment"},{include:"#block"}]},"fixed-statement":{begin:new RegExp("\\b(fixed)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.context.fixed.cs"}},end:new RegExp("(?<=\\))|(?=[\\;\\}])","dgv"),patterns:[{include:"#intrusive"},{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#intrusive"},{include:"#local-variable-declaration"}]}]},"for-statement":{begin:new RegExp("\\b(for)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.loop.for.cs"}},end:new RegExp("(?<=\\))|(?=[\\;\\}])","dgv"),patterns:[{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{begin:new RegExp("(?=[^\\;\\)])","dgv"),end:new RegExp("(?=[\\;\\)])","dgv"),patterns:[{include:"#intrusive"},{include:"#local-variable-declaration"}]},{begin:new RegExp("(?=;)","dgv"),end:new RegExp("(?=\\))","dgv"),patterns:[{include:"#intrusive"},{include:"#expression"},{include:"#punctuation-comma"},{include:"#punctuation-semicolon"}]}]}]},"foreach-statement":{begin:new RegExp("\\b(foreach)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.loop.foreach.cs"}},end:new RegExp("(?<=\\))|(?=[\\;\\}])","dgv"),patterns:[{include:"#intrusive"},{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#intrusive"},{captures:{1:{name:"storage.modifier.ref.cs"},2:{name:"storage.type.var.cs"},3:{patterns:[{include:"#type"}]},8:{name:"entity.name.variable.local.cs"},9:{name:"keyword.control.loop.in.cs"}},match:new e("(?:(?:(\\bref)\\p{space}+)?(\\bvar\\b)|(?<type_name>(?:ref\\p{space}+)?(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*))\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\p{space}+\\b(in)\\b","dgv",{hiddenCaptures:[6,8,9,10,13],transfers:[[4,[6,9,13]],[5,[8]],[7,[10]]]})},{captures:{1:{name:"storage.type.var.cs"},2:{patterns:[{include:"#tuple-declaration-deconstruction-element-list"}]},3:{name:"keyword.control.loop.in.cs"}},match:new RegExp("(?:\\b(var)\\b\\p{space}*)?(?<tuple>\\((?:[^\\(\\)]|(?:\\((?:[^\\(\\)]|(?:\\((?:[^\\(\\)]|(?:\\((?:[^\\(\\)]|(?:\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\))\\p{space}+\\b(in)\\b","dgv")},{include:"#expression"}]}]},"generic-constraints":{begin:new RegExp("(where)\\p{space}+(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(:)","dgv"),beginCaptures:{1:{name:"storage.modifier.where.cs"},2:{name:"entity.name.type.type-parameter.cs"},3:{name:"punctuation.separator.colon.cs"}},end:new RegExp("(?=\\{|where|;|=>)","dgv"),patterns:[{match:new RegExp("\\bclass\\b","dgv"),name:"storage.type.class.cs"},{match:new RegExp("\\bstruct\\b","dgv"),name:"storage.type.struct.cs"},{match:new RegExp("\\bdefault\\b","dgv"),name:"keyword.other.constraint.default.cs"},{match:new RegExp("\\bnotnull\\b","dgv"),name:"keyword.other.constraint.notnull.cs"},{match:new RegExp("\\bunmanaged\\b","dgv"),name:"keyword.other.constraint.unmanaged.cs"},{captures:{1:{name:"keyword.operator.expression.new.cs"},2:{name:"punctuation.parenthesis.open.cs"},3:{name:"punctuation.parenthesis.close.cs"}},match:new RegExp("(new)\\p{space}*(\\()\\p{space}*(\\))","dgv")},{include:"#type"},{include:"#punctuation-comma"},{include:"#generic-constraints"}]},"goto-statement":{begin:new RegExp("(?<!\\.)\\b(goto)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.flow.goto.cs"}},end:new RegExp("(?=[\\;\\}])","dgv"),patterns:[{begin:new RegExp("\\b(case)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.conditional.case.cs"}},end:new RegExp("(?=[\\;\\}])","dgv"),patterns:[{include:"#expression"}]},{captures:{1:{name:"keyword.control.conditional.default.cs"}},match:new RegExp("\\b(default)\\b","dgv")},{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.label.cs"}]},"group-by":{captures:{1:{name:"keyword.operator.expression.query.by.cs"}},match:new RegExp("\\b(by)\\b\\p{space}*","dgv")},"group-clause":{begin:new RegExp("\\b(group)\\b\\p{space}*","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.query.group.cs"}},end:new RegExp("(?=[\\;\\)])","dgv"),patterns:[{include:"#group-by"},{include:"#group-into"},{include:"#query-body"},{include:"#expression"}]},"group-into":{captures:{1:{name:"keyword.operator.expression.query.into.cs"},2:{name:"entity.name.variable.range-variable.cs"}},match:new RegExp("\\b(into)\\b\\p{space}*(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\b\\p{space}*","dgv")},identifier:{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"variable.other.readwrite.cs"},"if-statement":{begin:new RegExp("(?<!\\.)\\b(if)\\b\\p{space}*(?=\\()","dgv"),beginCaptures:{1:{name:"keyword.control.conditional.if.cs"}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#expression"}]},{include:"#statement"}]},"implicit-anonymous-function-parameter":{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*\\b","dgv"),name:"entity.name.variable.parameter.cs"},"indexer-declaration":{begin:new e("(?<return_type>(?<type_name>(?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}+)(?<interface_name>((?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}*\\.\\p{space}*)?(?<indexer_name>this)\\p{space}*(?=\\[)","dgv",{hiddenCaptures:[5,7,8,9,12,13,14,15,16,17,18,19,20],transfers:[[3,[5,8,13,15,18]],[4,[7,14,17]],[6,[9,16,19]],[2,[12]],[10,[20]]]}),beginCaptures:{1:{patterns:[{include:"#type"}]},7:{patterns:[{include:"#type"},{include:"#punctuation-accessor"}]},8:{name:"variable.language.this.cs"}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#bracketed-parameter-list"},{include:"#property-accessors"},{include:"#accessor-getter-expression"},{include:"#variable-initializer"}]},"initializer-expression":{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#expression"},{include:"#punctuation-comma"}]},"interface-declaration":{begin:new RegExp("(?=\\binterface\\b)","dgv"),end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{begin:new RegExp("(interface)\\b\\p{space}+(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)","dgv"),beginCaptures:{1:{name:"storage.type.interface.cs"},2:{name:"entity.name.type.interface.cs"}},end:new RegExp("(?=\\{)|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#type-parameter-list"},{include:"#base-types"},{include:"#generic-constraints"}]},{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#interface-members"}]},{include:"#preprocessor"},{include:"#comment"}]},"interface-members":{patterns:[{include:"#preprocessor"},{include:"#comment"},{include:"#storage-modifier"},{include:"#property-declaration"},{include:"#event-declaration"},{include:"#indexer-declaration"},{include:"#method-declaration"},{include:"#operator-declaration"},{include:"#attribute-section"},{include:"#punctuation-semicolon"}]},"interpolated-string":{begin:new RegExp('\\$"',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('(")|([^\\\\\\n](?=\\n?$))',"dgv"),endCaptures:{1:{name:"punctuation.definition.string.end.cs"},2:{name:"invalid.illegal.newline.cs"}},name:"string.quoted.double.cs",patterns:[{include:"#string-character-escape"},{include:"#interpolation"}]},interpolation:{begin:new RegExp("(?<=[^\\{]|^)((?:\\{\\{)*)(\\{)(?=[^\\{])","dgv"),beginCaptures:{1:{name:"string.quoted.double.cs"},2:{name:"punctuation.definition.interpolation.begin.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.definition.interpolation.end.cs"}},name:"meta.interpolation.cs",patterns:[{include:"#expression"}]},intrusive:{patterns:[{include:"#preprocessor"},{include:"#comment"}]},"invocation-expression":{begin:new RegExp("(?:(?:(\\?)\\p{space}*)?(\\.)\\p{space}*|(->)\\p{space}*)?(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(<(?<type_args>[^\\<\\>\\(\\)]|\\((?:[^\\<\\>\\(\\)]|<[^\\<\\>\\(\\)]*>|\\([^\\<\\>\\(\\)]*\\))*\\)|<(?:[^\\<\\>\\(\\)]|\\((?:[^\\<\\>\\(\\)]|<[^\\<\\>\\(\\)]*>|\\([^\\<\\>\\(\\)]*\\))*\\)|<(?:[^\\<\\>\\(\\)]|\\((?:[^\\<\\>\\(\\)]|<[^\\<\\>\\(\\)]*>|\\([^\\<\\>\\(\\)]*\\))*\\)|<(?:[^\\<\\>\\(\\)]|\\((?:[^\\<\\>\\(\\)]|<[^\\<\\>\\(\\)]*>|\\([^\\<\\>\\(\\)]*\\))*\\)|<(?:[^\\<\\>\\(\\)]|\\((?:[^\\<\\>\\(\\)]|<[^\\<\\>\\(\\)]*>|\\([^\\<\\>\\(\\)]*\\))*\\)|<(?:)*>)*>)*>)*>)*>)*>\\p{space}*)?(?=\\()","dgv"),beginCaptures:{1:{name:"keyword.operator.null-conditional.cs"},2:{name:"punctuation.accessor.cs"},3:{name:"punctuation.accessor.pointer.cs"},4:{name:"entity.name.function.cs"},5:{patterns:[{include:"#type-arguments"}]}},end:new RegExp("(?<=\\))","dgv"),patterns:[{include:"#argument-list"}]},"is-expression":{begin:new RegExp("(?<!\\.)\\b(is)\\b","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.pattern.is.cs"}},end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=)","dgv"),patterns:[{include:"#pattern"}]},"join-clause":{begin:new e("\\b(join)\\b\\p{space}*(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)?\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\b\\p{space}*\\b(in)\\b\\p{space}*","dgv",{hiddenCaptures:[5,7,8,9,12],transfers:[[3,[5,8,12]],[4,[7]],[6,[9]]]}),beginCaptures:{1:{name:"keyword.operator.expression.query.join.cs"},2:{patterns:[{include:"#type"}]},7:{name:"entity.name.variable.range-variable.cs"},8:{name:"keyword.operator.expression.query.in.cs"}},end:new RegExp("(?=[\\;\\)])","dgv"),patterns:[{include:"#join-on"},{include:"#join-equals"},{include:"#join-into"},{include:"#query-body"},{include:"#expression"}]},"join-equals":{captures:{1:{name:"keyword.operator.expression.query.equals.cs"}},match:new RegExp("\\b(equals)\\b\\p{space}*","dgv")},"join-into":{captures:{1:{name:"keyword.operator.expression.query.into.cs"},2:{name:"entity.name.variable.range-variable.cs"}},match:new RegExp("\\b(into)\\b\\p{space}*(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\b\\p{space}*","dgv")},"join-on":{captures:{1:{name:"keyword.operator.expression.query.on.cs"}},match:new RegExp("\\b(on)\\b\\p{space}*","dgv")},"labeled-statement":{captures:{1:{name:"entity.name.label.cs"},2:{name:"punctuation.separator.colon.cs"}},match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(:)","dgv")},"language-variable":{patterns:[{match:new RegExp("\\b(base|this)\\b","dgv"),name:"variable.language.$1.cs"},{match:new RegExp("\\b(value)\\b","dgv"),name:"variable.other.$1.cs"}]},"let-clause":{begin:new RegExp("\\b(let)\\b\\p{space}*(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\b\\p{space}*(=)\\p{space}*","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.query.let.cs"},2:{name:"entity.name.variable.range-variable.cs"},3:{name:"keyword.operator.assignment.cs"}},end:new RegExp("(?=[\\;\\)])","dgv"),patterns:[{include:"#query-body"},{include:"#expression"}]},"list-pattern":{begin:new RegExp("(?=\\[)","dgv"),end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{begin:new RegExp("\\[","dgv"),beginCaptures:{0:{name:"punctuation.squarebracket.open.cs"}},end:new RegExp("\\]","dgv"),endCaptures:{0:{name:"punctuation.squarebracket.close.cs"}},patterns:[{include:"#pattern"},{include:"#punctuation-comma"}]},{begin:new RegExp("(?<=\\])","dgv"),end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{include:"#intrusive"},{include:"#simple-designation-pattern"}]}]},literal:{patterns:[{include:"#boolean-literal"},{include:"#null-literal"},{include:"#numeric-literal"},{include:"#char-literal"},{include:"#raw-string-literal"},{include:"#string-literal"},{include:"#verbatim-string-literal"},{include:"#tuple-literal"}]},"local-constant-declaration":{begin:new e("(?<const_keyword>\\bconst\\b)\\p{space}*(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\p{space}*(?=[\\,\\;\\=])","dgv",{hiddenCaptures:[5,7,8,9,12],transfers:[[3,[5,8,12]],[4,[7]],[6,[9]]]}),beginCaptures:{1:{name:"storage.modifier.const.cs"},2:{patterns:[{include:"#type"}]},7:{name:"entity.name.variable.local.cs"}},end:new RegExp("(?=;)","dgv"),patterns:[{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.variable.local.cs"},{include:"#punctuation-comma"},{include:"#comment"},{include:"#variable-initializer"}]},"local-declaration":{patterns:[{include:"#local-constant-declaration"},{include:"#local-variable-declaration"},{include:"#local-function-declaration"},{include:"#local-tuple-var-deconstruction"}]},"local-function-declaration":{begin:new e("\\b((?:(?:async|unsafe|static|extern)\\p{space}+)*)(?<type_name>(?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?)?(?:\\p{space}*\\[\\p{space}*(?:,\\p{space}*)*\\](?:\\p{space}*\\?)?)*)\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\p{space}*(<[^\\<\\>]+>)?\\p{space}*(?=\\()","dgv",{hiddenCaptures:[5,7,8,9,12],transfers:[[3,[5,8,12]],[4,[7]],[6,[9]]]}),beginCaptures:{1:{patterns:[{include:"#storage-modifier"}]},2:{patterns:[{include:"#type"}]},7:{name:"entity.name.function.cs"},8:{patterns:[{include:"#type-parameter-list"}]}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#parenthesized-parameter-list"},{include:"#generic-constraints"},{include:"#expression-body"},{include:"#block"}]},"local-tuple-var-deconstruction":{begin:new RegExp("\\b(var)\\b\\p{space}*(?<tuple>\\((?:[^\\(\\)]|(?:\\((?:[^\\(\\)]|(?:\\((?:[^\\(\\)]|(?:\\((?:[^\\(\\)]|(?:\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\))\\p{space}*(?=[\\;\\=\\)])","dgv"),beginCaptures:{1:{name:"storage.type.var.cs"},2:{patterns:[{include:"#tuple-declaration-deconstruction-element-list"}]}},end:new RegExp("(?=[\\;\\)])","dgv"),patterns:[{include:"#comment"},{include:"#variable-initializer"}]},"local-variable-declaration":{begin:new e("(?:(?:(\\bref)\\p{space}+(?:(\\breadonly)\\p{space}+)?)?(\\bvar\\b)|(?<type_name>(?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*[\\?\\*]\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*))\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\p{space}*(?!=>)(?=[\\,\\;\\=\\)])","dgv",{hiddenCaptures:[7,9,10,11,14],transfers:[[5,[7,10,14]],[6,[9]],[8,[11]]]}),beginCaptures:{1:{name:"storage.modifier.ref.cs"},2:{name:"storage.modifier.readonly.cs"},3:{name:"storage.type.var.cs"},4:{patterns:[{include:"#type"}]},9:{name:"entity.name.variable.local.cs"}},end:new RegExp("(?=[\\;\\)\\}])","dgv"),patterns:[{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.variable.local.cs"},{include:"#punctuation-comma"},{include:"#comment"},{include:"#variable-initializer"}]},"lock-statement":{begin:new RegExp("\\b(lock)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.context.lock.cs"}},end:new RegExp("(?<=\\))|(?=[\\;\\}])","dgv"),patterns:[{include:"#intrusive"},{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#intrusive"},{include:"#expression"}]}]},"member-access-expression":{patterns:[{captures:{1:{name:"keyword.operator.null-conditional.cs"},2:{name:"punctuation.accessor.cs"},3:{name:"punctuation.accessor.pointer.cs"},4:{name:"variable.other.object.property.cs"}},match:new RegExp("(?:(?:(\\?)\\p{space}*)?(\\.)\\p{space}*|(->)\\p{space}*)(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?![_\\p{Alpha}\\p{Nd}\\(]|(\\?)?\\[|<)","dgv")},{captures:{1:{name:"punctuation.accessor.cs"},2:{name:"variable.other.object.cs"},3:{patterns:[{include:"#type-arguments"}]}},match:new e("(\\.)?\\p{space}*(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)(?<type_params>\\p{space}*<([^\\<\\>]|(?:\\p{space}*<([^\\<\\>]|(?:\\p{space}*<([^\\<\\>]|(?:\\p{space}*<([^\\<\\>]|(?:\\p{space}*<([^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)(?=(\\p{space}*\\?)?\\p{space}*\\.\\p{space}*@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)","dgv",{hiddenCaptures:[5,6,7,8]})},{captures:{1:{name:"variable.other.object.cs"}},match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)(?=\\p{space}*(?:(?:\\?\\p{space}*)?\\.|->)\\p{space}*@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)","dgv")}]},"method-declaration":{begin:new e("(?<return_type>(?<type_name>(?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}+)(?<interface_name>((?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}*\\.\\p{space}*)?((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\p{space}*(<([^\\<\\>]+)>)?\\p{space}*(?=\\()","dgv",{hiddenCaptures:[5,7,8,9,12,13,14,15,16,17,18,19,20,22],transfers:[[3,[5,8,13,15,18,22]],[4,[7,14,17]],[6,[9,16,19]],[2,[12]],[10,[20]]]}),beginCaptures:{1:{patterns:[{include:"#type"}]},7:{patterns:[{include:"#type"},{include:"#punctuation-accessor"}]},8:{name:"entity.name.function.cs"},9:{patterns:[{include:"#type-parameter-list"}]}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#parenthesized-parameter-list"},{include:"#generic-constraints"},{include:"#expression-body"},{include:"#block"}]},"named-argument":{begin:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(:)","dgv"),beginCaptures:{1:{name:"entity.name.variable.parameter.cs"},2:{name:"punctuation.separator.colon.cs"}},end:new RegExp("(?=([\\,\\)\\]]))","dgv"),patterns:[{include:"#argument"}]},"namespace-declaration":{begin:new RegExp("\\b(namespace)\\p{space}+","dgv"),beginCaptures:{1:{name:"storage.type.namespace.cs"}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{include:"#comment"},{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.type.namespace.cs"},{include:"#punctuation-accessor"},{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#declarations"},{include:"#using-directive"},{include:"#punctuation-semicolon"}]}]},"null-literal":{match:new RegExp("(?<!\\.)\\bnull\\b","dgv"),name:"constant.language.null.cs"},"numeric-literal":{captures:{0:{patterns:[{begin:new RegExp("(?=[^\\n])","dgv"),end:new RegExp("(?=\\n?$)","dgv"),patterns:[{captures:{2:{name:"constant.numeric.decimal.cs",patterns:[{match:new RegExp("(?<=\\p{AHex})_(?=\\p{AHex})","dgv"),name:"constant.numeric.other.separator.thousands.cs"}]},3:{name:"constant.numeric.other.separator.thousands.cs"},4:{name:"constant.numeric.other.separator.decimals.cs"},5:{name:"constant.numeric.decimal.cs",patterns:[{match:new RegExp("(?<=\\p{AHex})_(?=\\p{AHex})","dgv"),name:"constant.numeric.other.separator.thousands.cs"}]},6:{name:"constant.numeric.other.separator.thousands.cs"},8:{name:"constant.numeric.other.exponent.cs"},9:{name:"keyword.operator.arithmetic.cs"},10:{name:"keyword.operator.arithmetic.cs"},11:{name:"constant.numeric.decimal.cs",patterns:[{match:new RegExp("(?<=\\p{AHex})_(?=\\p{AHex})","dgv"),name:"constant.numeric.other.separator.thousands.cs"}]},12:{name:"constant.numeric.other.suffix.cs"}},match:new RegExp("((?=[0-9\\.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=\\p{AHex})_(?=\\p{AHex})))*)?((?:(?<=[0-9])|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=\\p{AHex})_(?=\\p{AHex})))*)?((?<!_)([eE])(\\+?)(-?)([0-9](?:[0-9]|(?<=\\p{AHex})_(?=\\p{AHex}))*))?([fFdDmM](?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))?(?=\\n?$)","dgvy")},{captures:{1:{name:"constant.numeric.other.preffix.binary.cs"},2:{name:"constant.numeric.binary.cs",patterns:[{match:new RegExp("(?<=\\p{AHex})_(?=\\p{AHex})","dgv"),name:"constant.numeric.other.separator.thousands.cs"}]},3:{name:"constant.numeric.other.separator.thousands.cs"},4:{name:"constant.numeric.other.suffix.cs"}},match:new RegExp("(0[bB])([01_](?:[01_]|((?<=\\p{AHex})_(?=\\p{AHex})))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))?(?=\\n?$)","dgvy")},{captures:{1:{name:"constant.numeric.other.preffix.hex.cs"},2:{name:"constant.numeric.hex.cs",patterns:[{match:new RegExp("(?<=\\p{AHex})_(?=\\p{AHex})","dgv"),name:"constant.numeric.other.separator.thousands.cs"}]},3:{name:"constant.numeric.other.separator.thousands.cs"},4:{name:"constant.numeric.other.suffix.cs"}},match:new RegExp("(0[xX])(\\p{AHex}(?:\\p{AHex}|((?<=\\p{AHex})_(?=\\p{AHex})))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))?(?=\\n?$)","dgvy")},{captures:{2:{name:"constant.numeric.decimal.cs",patterns:[{match:new RegExp("(?<=\\p{AHex})_(?=\\p{AHex})","dgv"),name:"constant.numeric.other.separator.thousands.cs"}]},3:{name:"constant.numeric.other.separator.thousands.cs"},5:{name:"constant.numeric.other.exponent.cs"},6:{name:"keyword.operator.arithmetic.cs"},7:{name:"keyword.operator.arithmetic.cs"},8:{name:"constant.numeric.decimal.cs",patterns:[{match:new RegExp("(?<=\\p{AHex})_(?=\\p{AHex})","dgv"),name:"constant.numeric.other.separator.thousands.cs"}]},9:{name:"constant.numeric.other.suffix.cs"}},match:new RegExp("((?=[0-9\\.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=\\p{AHex})_(?=\\p{AHex})))*)((?<!_)([eE])(\\+?)(-?)([0-9](?:[0-9]|(?<=\\p{AHex})_(?=\\p{AHex}))*))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))?(?=\\n?$)","dgvy")},{match:new RegExp("(?:[0-9a-zA-Z_]|(?<=[eE])[\\+\\-]|\\.\\p{Nd})+","dgv"),name:"invalid.illegal.constant.numeric.cs"}]}]}},match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])\\.?\\p{Nd}(?:[0-9a-zA-Z_]|(?<=[eE])[\\+\\-]|\\.\\p{Nd})*","dgv")},"object-creation-expression":{patterns:[{include:"#object-creation-expression-with-parameters"},{include:"#object-creation-expression-with-no-parameters"}]},"object-creation-expression-with-no-parameters":{captures:{1:{name:"keyword.operator.expression.new.cs"},2:{patterns:[{include:"#type"}]}},match:new e("(new)\\p{space}+(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}*(?=\\{|//|/\\*|(?=\\n?$))","dgv",{hiddenCaptures:[5,7,8,9],transfers:[[3,[5,8]],[4,[7]],[6,[9]]]})},"object-creation-expression-with-parameters":{begin:new e("(new)(?:\\p{space}+(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*))?\\p{space}*(?=\\()","dgv",{hiddenCaptures:[5,7,8,9],transfers:[[3,[5,8]],[4,[7]],[6,[9]]]}),beginCaptures:{1:{name:"keyword.operator.expression.new.cs"},2:{patterns:[{include:"#type"}]}},end:new RegExp("(?<=\\))","dgv"),patterns:[{include:"#argument-list"}]},"operator-assignment":{match:new RegExp("(?<![\\=\\!])(=)(?!=)","dgv"),name:"keyword.operator.assignment.cs"},"operator-declaration":{begin:new e("(?<type_name>(?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}*\\b(?<operator_keyword>operator)\\b\\p{space}*(?<operator>[\\+\\-\\*\\/\\%\\&\\|\\^\\!\\=\\~\\<\\>]+|true|false)\\p{space}*(?=\\()","dgv",{hiddenCaptures:[4,6,7,8],transfers:[[2,[4,7]],[3,[6]],[5,[8]]]}),beginCaptures:{1:{patterns:[{include:"#type"}]},6:{name:"storage.type.operator.cs"},7:{name:"entity.name.function.cs"}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#parenthesized-parameter-list"},{include:"#expression-body"},{include:"#block"}]},"orderby-clause":{begin:new RegExp("\\b(orderby)\\b\\p{space}*","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.query.orderby.cs"}},end:new RegExp("(?=[\\;\\)])","dgv"),patterns:[{include:"#ordering-direction"},{include:"#query-body"},{include:"#expression"},{include:"#punctuation-comma"}]},"ordering-direction":{captures:{1:{name:"keyword.operator.expression.query.$1.cs"}},match:new RegExp("\\b(ascending|descending)\\b","dgv")},parameter:{captures:{1:{name:"storage.modifier.$1.cs"},2:{patterns:[{include:"#type"}]},7:{name:"entity.name.variable.parameter.cs"}},match:new e("(?:\\b(ref|params|out|in|this)\\b\\p{space}+)?(?<type_name>(?:ref\\p{space}+)?(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))","dgv",{hiddenCaptures:[5,7,8,9,12],transfers:[[3,[5,8,12]],[4,[7]],[6,[9]]]})},"parenthesized-expression":{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#expression"}]},"parenthesized-parameter-list":{begin:new RegExp("(\\()","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("(\\))","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#comment"},{include:"#attribute-section"},{include:"#parameter"},{include:"#punctuation-comma"},{include:"#variable-initializer"}]},pattern:{patterns:[{include:"#intrusive"},{include:"#combinator-pattern"},{include:"#discard-pattern"},{include:"#constant-pattern"},{include:"#relational-pattern"},{include:"#var-pattern"},{include:"#type-pattern"},{include:"#positional-pattern"},{include:"#property-pattern"},{include:"#list-pattern"},{include:"#slice-pattern"}]},"positional-pattern":{begin:new RegExp("(?=\\()","dgv"),end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#subpattern"},{include:"#punctuation-comma"}]},{begin:new RegExp("(?<=\\))","dgv"),end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{include:"#intrusive"},{include:"#property-pattern"},{include:"#simple-designation-pattern"}]}]},preprocessor:{begin:new RegExp("^\\p{space}*(#)\\p{space}*","dgv"),beginCaptures:{1:{name:"punctuation.separator.hash.cs"}},end:new RegExp("(?<=(?=\\n?$))","dgv"),name:"meta.preprocessor.cs",patterns:[{include:"#comment"},{include:"#preprocessor-define-or-undef"},{include:"#preprocessor-if-or-elif"},{include:"#preprocessor-else-or-endif"},{include:"#preprocessor-warning-or-error"},{include:"#preprocessor-region"},{include:"#preprocessor-endregion"},{include:"#preprocessor-load"},{include:"#preprocessor-r"},{include:"#preprocessor-line"},{include:"#preprocessor-pragma-warning"},{include:"#preprocessor-pragma-checksum"}]},"preprocessor-define-or-undef":{captures:{1:{name:"keyword.preprocessor.define.cs"},2:{name:"keyword.preprocessor.undef.cs"},3:{name:"entity.name.variable.preprocessor.symbol.cs"}},match:new RegExp("\\b(?:(define)|(undef))\\b\\p{space}*\\b([_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\b","dgv")},"preprocessor-else-or-endif":{captures:{1:{name:"keyword.preprocessor.else.cs"},2:{name:"keyword.preprocessor.endif.cs"}},match:new RegExp("\\b(?:(else)|(endif))\\b","dgv")},"preprocessor-endregion":{captures:{1:{name:"keyword.preprocessor.endregion.cs"}},match:new RegExp("\\b(endregion)\\b","dgv")},"preprocessor-expression":{patterns:[{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#preprocessor-expression"}]},{captures:{1:{name:"constant.language.boolean.true.cs"},2:{name:"constant.language.boolean.false.cs"},3:{name:"entity.name.variable.preprocessor.symbol.cs"}},match:new RegExp("\\b(?:(true)|(false)|([_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\b","dgv")},{captures:{1:{name:"keyword.operator.comparison.cs"},2:{name:"keyword.operator.logical.cs"}},match:new RegExp("(==|!=)|(!|&&|\\|\\|)","dgv")}]},"preprocessor-if-or-elif":{begin:new RegExp("\\b(?:(if)|(elif))\\b","dgv"),beginCaptures:{1:{name:"keyword.preprocessor.if.cs"},2:{name:"keyword.preprocessor.elif.cs"}},end:new RegExp("(?=(?=\\n?$))","dgv"),patterns:[{include:"#comment"},{include:"#preprocessor-expression"}]},"preprocessor-line":{begin:new RegExp("\\b(line)\\b","dgv"),beginCaptures:{1:{name:"keyword.preprocessor.line.cs"}},end:new RegExp("(?=(?=\\n?$))","dgv"),patterns:[{captures:{1:{name:"keyword.preprocessor.default.cs"},2:{name:"keyword.preprocessor.hidden.cs"}},match:new RegExp("\\b(default|hidden)","dgv")},{captures:{0:{name:"constant.numeric.decimal.cs"}},match:new RegExp("[0-9]+","dgv")},{captures:{0:{name:"string.quoted.double.cs"}},match:new RegExp('"[^"]*"',"dgv")}]},"preprocessor-load":{begin:new RegExp("\\b(load)\\b","dgv"),beginCaptures:{1:{name:"keyword.preprocessor.load.cs"}},end:new RegExp("(?=(?=\\n?$))","dgv"),patterns:[{captures:{0:{name:"string.quoted.double.cs"}},match:new RegExp('"[^"]*"',"dgv")}]},"preprocessor-pragma-checksum":{captures:{1:{name:"keyword.preprocessor.pragma.cs"},2:{name:"keyword.preprocessor.checksum.cs"},3:{name:"string.quoted.double.cs"},4:{name:"string.quoted.double.cs"},5:{name:"string.quoted.double.cs"}},match:new RegExp('\\b(pragma)\\b\\p{space}*\\b(checksum)\\b\\p{space}*("[^"]*")\\p{space}*("[^"]*")\\p{space}*("[^"]*")',"dgv")},"preprocessor-pragma-warning":{captures:{1:{name:"keyword.preprocessor.pragma.cs"},2:{name:"keyword.preprocessor.warning.cs"},3:{name:"keyword.preprocessor.disable.cs"},4:{name:"keyword.preprocessor.restore.cs"},5:{patterns:[{captures:{0:{name:"constant.numeric.decimal.cs"}},match:new RegExp("[0-9]+","dgv")},{include:"#punctuation-comma"}]}},match:new RegExp("\\b(pragma)\\b\\p{space}*\\b(warning)\\b\\p{space}*\\b(?:(disable)|(restore))\\b(\\p{space}*[0-9]+(?:\\p{space}*,\\p{space}*[0-9]+)?)?","dgv")},"preprocessor-r":{begin:new RegExp("\\b(r)\\b","dgv"),beginCaptures:{1:{name:"keyword.preprocessor.r.cs"}},end:new RegExp("(?=(?=\\n?$))","dgv"),patterns:[{captures:{0:{name:"string.quoted.double.cs"}},match:new RegExp('"[^"]*"',"dgv")}]},"preprocessor-region":{captures:{1:{name:"keyword.preprocessor.region.cs"},2:{name:"string.unquoted.preprocessor.message.cs"}},match:new RegExp("\\b(region)\\b\\p{space}*([^\\n]*)(?=(?=\\n?$))","dgv")},"preprocessor-warning-or-error":{captures:{1:{name:"keyword.preprocessor.warning.cs"},2:{name:"keyword.preprocessor.error.cs"},3:{name:"string.unquoted.preprocessor.message.cs"}},match:new RegExp("\\b(?:(warning)|(error))\\b\\p{space}*([^\\n]*)(?=(?=\\n?$))","dgv")},"property-accessors":{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#comment"},{include:"#attribute-section"},{match:new RegExp("\\b(private|protected|internal)\\b","dgv"),name:"storage.modifier.$1.cs"},{begin:new RegExp("\\b(get)\\b\\p{space}*(?=[\\{\\;]|=>|\\/\\/|\\/\\*|(?=\\n?$))","dgv"),beginCaptures:{1:{name:"storage.type.accessor.$1.cs"}},end:new RegExp("(?<=[\\}\\;])|(?=\\})","dgv"),patterns:[{include:"#accessor-getter"}]},{begin:new RegExp("\\b(set|init)\\b\\p{space}*(?=[\\{\\;]|=>|\\/\\/|\\/\\*|(?=\\n?$))","dgv"),beginCaptures:{1:{name:"storage.type.accessor.$1.cs"}},end:new RegExp("(?<=[\\}\\;])|(?=\\})","dgv"),patterns:[{include:"#accessor-setter"}]}]},"property-declaration":{begin:new e("(?![\\p{Alpha}\\p{M}\\p{Nd}\\p{Pc}\\p{space}]*\\b(?:class|interface|struct|enum|event)\\b)(?<return_type>(?<type_name>(?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}+)(?<interface_name>((?:ref\\p{space}+(?:readonly\\p{space}+)?)?(?:(?:(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)\\p{space}*\\.\\p{space}*)?(?<property_name>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\p{space}*(?=\\{|=>|//|/\\*|(?=\\n?$))","dgv",{hiddenCaptures:[5,7,8,9,12,13,14,15,16,17,18,19,20,22],transfers:[[3,[5,8,13,15,18,22]],[4,[7,14,17]],[6,[9,16,19]],[2,[12]],[10,[20]]]}),beginCaptures:{1:{patterns:[{include:"#type"}]},7:{patterns:[{include:"#type"},{include:"#punctuation-accessor"}]},8:{name:"entity.name.variable.property.cs"}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#property-accessors"},{include:"#accessor-getter-expression"},{include:"#variable-initializer"},{include:"#class-or-struct-members"}]},"property-pattern":{begin:new RegExp("(?=\\{)","dgv"),end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#subpattern"},{include:"#punctuation-comma"}]},{begin:new RegExp("(?<=\\})","dgv"),end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{include:"#intrusive"},{include:"#simple-designation-pattern"}]}]},"punctuation-accessor":{match:new RegExp("\\.","dgv"),name:"punctuation.accessor.cs"},"punctuation-comma":{match:new RegExp(",","dgv"),name:"punctuation.separator.comma.cs"},"punctuation-semicolon":{match:new RegExp(";","dgv"),name:"punctuation.terminator.statement.cs"},"query-body":{patterns:[{include:"#let-clause"},{include:"#where-clause"},{include:"#join-clause"},{include:"#orderby-clause"},{include:"#select-clause"},{include:"#group-clause"}]},"query-expression":{begin:new e("\\b(from)\\b\\p{space}*(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)?\\p{space}+((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\b\\p{space}*\\b(in)\\b\\p{space}*","dgv",{hiddenCaptures:[5,7,8,9,12],transfers:[[3,[5,8,12]],[4,[7]],[6,[9]]]}),beginCaptures:{1:{name:"keyword.operator.expression.query.from.cs"},2:{patterns:[{include:"#type"}]},7:{name:"entity.name.variable.range-variable.cs"},8:{name:"keyword.operator.expression.query.in.cs"}},end:new RegExp("(?=[\\;\\)])","dgv"),patterns:[{include:"#query-body"},{include:"#expression"}]},"raw-interpolated-string":{patterns:[{include:"#raw-interpolated-string-five-or-more-quote-one-or-more-interpolation"},{include:"#raw-interpolated-string-three-or-more-quote-three-or-more-interpolation"},{include:"#raw-interpolated-string-quadruple-quote-double-interpolation"},{include:"#raw-interpolated-string-quadruple-quote-single-interpolation"},{include:"#raw-interpolated-string-triple-quote-double-interpolation"},{include:"#raw-interpolated-string-triple-quote-single-interpolation"}]},"raw-interpolated-string-five-or-more-quote-one-or-more-interpolation":{begin:new RegExp('\\$+"""""+',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('"""""+',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs"},"raw-interpolated-string-quadruple-quote-double-interpolation":{begin:new RegExp('\\$\\$""""',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('""""',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs",patterns:[{include:"#double-raw-interpolation"}]},"raw-interpolated-string-quadruple-quote-single-interpolation":{begin:new RegExp('\\$""""',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('""""',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs",patterns:[{include:"#raw-interpolation"}]},"raw-interpolated-string-three-or-more-quote-three-or-more-interpolation":{begin:new RegExp('\\$\\$\\$+"""+',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('"""+',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs"},"raw-interpolated-string-triple-quote-double-interpolation":{begin:new RegExp('\\$\\$"""',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('"""',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs",patterns:[{include:"#double-raw-interpolation"}]},"raw-interpolated-string-triple-quote-single-interpolation":{begin:new RegExp('\\$"""',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('"""',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs",patterns:[{include:"#raw-interpolation"}]},"raw-interpolation":{begin:new RegExp("(?<=[^\\{]|^)(\\{*)(\\{)(?=[^\\{])","dgv"),beginCaptures:{1:{name:"string.quoted.double.cs"},2:{name:"punctuation.definition.interpolation.begin.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.definition.interpolation.end.cs"}},name:"meta.interpolation.cs",patterns:[{include:"#expression"}]},"raw-string-literal":{patterns:[{include:"#raw-string-literal-more"},{include:"#raw-string-literal-quadruple"},{include:"#raw-string-literal-triple"}]},"raw-string-literal-more":{begin:new RegExp('"""""+',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('"""""+',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs"},"raw-string-literal-quadruple":{begin:new RegExp('""""',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('""""',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs"},"raw-string-literal-triple":{begin:new RegExp('"""',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('"""',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs"},"readonly-modifier":{match:new RegExp("\\breadonly\\b","dgv"),name:"storage.modifier.readonly.cs"},"record-declaration":{begin:new RegExp("(?=\\brecord\\b)","dgv"),end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{begin:new RegExp("(record)\\b\\p{space}+(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)","dgv"),beginCaptures:{1:{name:"storage.type.record.cs"},2:{name:"entity.name.type.class.cs"}},end:new RegExp("(?=\\{)|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#type-parameter-list"},{include:"#parenthesized-parameter-list"},{include:"#base-types"},{include:"#generic-constraints"}]},{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#class-or-struct-members"}]},{include:"#preprocessor"},{include:"#comment"}]},"ref-modifier":{match:new RegExp("\\bref\\b","dgv"),name:"storage.modifier.ref.cs"},"relational-pattern":{begin:new RegExp("<=?|>=?","dgv"),beginCaptures:{0:{name:"keyword.operator.relational.cs"}},end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{include:"#expression"}]},"return-statement":{begin:new RegExp("(?<!\\.)\\b(return)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.flow.return.cs"}},end:new RegExp("(?=[\\;\\}])","dgv"),patterns:[{include:"#ref-modifier"},{include:"#expression"}]},"script-top-level":{patterns:[{include:"#statement"},{include:"#method-declaration"},{include:"#punctuation-semicolon"}]},"select-clause":{begin:new RegExp("\\b(select)\\b\\p{space}*","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.query.select.cs"}},end:new RegExp("(?=[\\;\\)])","dgv"),patterns:[{include:"#query-body"},{include:"#expression"}]},"simple-designation-pattern":{patterns:[{include:"#discard-pattern"},{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.variable.local.cs"}]},"slice-pattern":{match:new RegExp("\\.\\.","dgv"),name:"keyword.operator.range.cs"},statement:{patterns:[{include:"#preprocessor"},{include:"#comment"},{include:"#while-statement"},{include:"#do-statement"},{include:"#for-statement"},{include:"#foreach-statement"},{include:"#if-statement"},{include:"#else-part"},{include:"#goto-statement"},{include:"#return-statement"},{include:"#break-or-continue-statement"},{include:"#throw-statement"},{include:"#yield-statement"},{include:"#await-statement"},{include:"#try-statement"},{include:"#expression-operator-expression"},{include:"#context-control-statement"},{include:"#context-control-paren-statement"},{include:"#labeled-statement"},{include:"#object-creation-expression"},{include:"#array-creation-expression"},{include:"#anonymous-object-creation-expression"},{include:"#local-declaration"},{include:"#block"},{include:"#expression"},{include:"#punctuation-semicolon"}]},"storage-modifier":{match:new RegExp("(?<!\\.)\\b(new|public|protected|internal|private|abstract|virtual|override|sealed|static|partial|readonly|volatile|const|extern|async|unsafe|ref|required|file)\\b","dgv"),name:"storage.modifier.$1.cs"},"string-character-escape":{match:new RegExp("\\\\(x\\p{AHex}{1,4}|U\\p{AHex}{8}|u\\p{AHex}{4}|[^\\n])","dgv"),name:"constant.character.escape.cs"},"string-literal":{begin:new RegExp('(?<!@)"',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('(")|([^\\\\\\n](?=\\n?$))',"dgv"),endCaptures:{1:{name:"punctuation.definition.string.end.cs"},2:{name:"invalid.illegal.newline.cs"}},name:"string.quoted.double.cs",patterns:[{include:"#string-character-escape"}]},"struct-declaration":{begin:new RegExp("(?=(\\brecord\\b\\p{space}+)?\\bstruct\\b)","dgv"),end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{begin:new RegExp("(\\b(record)\\b\\p{space}+)?(struct)\\b\\p{space}+(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)","dgv"),beginCaptures:{2:{name:"storage.type.record.cs"},3:{name:"storage.type.struct.cs"},4:{name:"entity.name.type.struct.cs"}},end:new RegExp("(?=\\{)|(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#type-parameter-list"},{include:"#parenthesized-parameter-list"},{include:"#base-types"},{include:"#generic-constraints"}]},{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#class-or-struct-members"}]},{include:"#preprocessor"},{include:"#comment"}]},subpattern:{patterns:[{captures:{1:{patterns:[{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"variable.other.object.property.cs"},{include:"#punctuation-accessor"}]},2:{name:"punctuation.separator.colon.cs"}},match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*(?:\\p{space}*\\.\\p{space}*@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)*)\\p{space}*(:)","dgv")},{include:"#pattern"}]},"switch-expression":{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#punctuation-comma"},{begin:new RegExp("=>","dgv"),beginCaptures:{0:{name:"keyword.operator.arrow.cs"}},end:new RegExp("(?=[\\,\\}])","dgv"),patterns:[{include:"#expression"}]},{begin:new RegExp("\\b(when)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.conditional.when.cs"}},end:new RegExp("(?==>|[\\,\\}])","dgv"),patterns:[{include:"#case-guard"}]},{begin:new RegExp("(?!\\p{space})","dgv"),end:new RegExp("(?=\\bwhen\\b|=>|[\\,\\}])","dgv"),patterns:[{include:"#pattern"}]}]},"switch-label":{begin:new RegExp("\\b(case|default)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.conditional.$1.cs"}},end:new RegExp("(:)|(?=\\})","dgv"),endCaptures:{1:{name:"punctuation.separator.colon.cs"}},patterns:[{begin:new RegExp("\\b(when)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.conditional.when.cs"}},end:new RegExp("(?=[\\:\\}])","dgv"),patterns:[{include:"#case-guard"}]},{begin:new RegExp("(?!\\p{space})","dgv"),end:new RegExp("(?=\\bwhen\\b|[\\:\\}])","dgv"),patterns:[{include:"#pattern"}]}]},"switch-statement":{patterns:[{include:"#intrusive"},{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#expression"}]},{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.curlybrace.open.cs"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.curlybrace.close.cs"}},patterns:[{include:"#switch-label"},{include:"#statement"}]}]},"switch-statement-or-expression":{begin:new RegExp("(?<!\\.)\\b(switch)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.conditional.switch.cs"}},end:new RegExp("(?<=\\})|(?=\\})","dgv"),patterns:[{include:"#intrusive"},{begin:new RegExp("(?=\\()","dgv"),end:new RegExp("(?<=\\})|(?=\\})","dgv"),patterns:[{include:"#switch-statement"}]},{begin:new RegExp("(?=\\{)","dgv"),end:new RegExp("(?<=\\})|(?=\\})","dgv"),patterns:[{include:"#switch-expression"}]}]},"throw-expression":{captures:{1:{name:"keyword.control.flow.throw.cs"}},match:new RegExp("\\b(throw)\\b","dgv")},"throw-statement":{begin:new RegExp("(?<!\\.)\\b(throw)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.flow.throw.cs"}},end:new RegExp("(?=[\\;\\}])","dgv"),patterns:[{include:"#expression"}]},"try-block":{begin:new RegExp("(?<!\\.)\\b(try)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.exception.try.cs"}},end:new RegExp("(?<=\\})","dgv"),patterns:[{include:"#comment"},{include:"#block"}]},"try-statement":{patterns:[{include:"#try-block"},{include:"#catch-clause"},{include:"#finally-clause"}]},"tuple-declaration-deconstruction-element-list":{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#comment"},{include:"#tuple-declaration-deconstruction-element-list"},{include:"#declaration-expression-tuple"},{include:"#punctuation-comma"},{captures:{1:{name:"entity.name.variable.tuple-element.cs"}},match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\b\\p{space}*(?=[\\,\\)])","dgv")}]},"tuple-deconstruction-assignment":{captures:{1:{patterns:[{include:"#tuple-deconstruction-element-list"}]}},match:new RegExp("(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\))\\p{space}*(?!=[\\>\\=])(?==)","dgv")},"tuple-deconstruction-element-list":{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#comment"},{include:"#tuple-deconstruction-element-list"},{include:"#declaration-expression-tuple"},{include:"#punctuation-comma"},{captures:{1:{name:"variable.other.readwrite.cs"}},match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\b\\p{space}*(?=[\\,\\)])","dgv")}]},"tuple-element":{captures:{1:{patterns:[{include:"#type"}]},6:{name:"entity.name.variable.tuple-element.cs"}},match:new e("(?<type_name>(?:(?:(?<identifier>@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*::\\p{space}*)?(?<name_and_type_args>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?<type_args>\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?)(?:\\p{space}*\\.\\p{space}*((@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:\\p{space}*<(?:[^\\<\\>]|(?:))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*))+>\\p{space}*)?))*|(?<tuple>\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:\\p{space}*\\((?:[^\\(\\)]|(?:))+\\)))+\\)))+\\)))+\\)))+\\)))(?:\\p{space}*\\?\\p{space}*)?(?:\\p{space}*\\[(?:\\p{space}*,\\p{space}*)*\\]\\p{space}*\\??\\p{space}*)*)(?:(?<tuple_name>(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*))\\b)?","dgv",{hiddenCaptures:[4,6,7,8,11],transfers:[[2,[4,7,11]],[3,[6]],[5,[8]]]})},"tuple-literal":{begin:new RegExp("(\\()(?=[^\\n]*[\\:\\,])","dgv"),beginCaptures:{1:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#comment"},{include:"#tuple-literal-element"},{include:"#expression"},{include:"#punctuation-comma"}]},"tuple-literal-element":{begin:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(?=:)","dgv"),beginCaptures:{1:{name:"entity.name.variable.tuple-element.cs"}},end:new RegExp("(:)","dgv"),endCaptures:{0:{name:"punctuation.separator.colon.cs"}}},"tuple-type":{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#tuple-element"},{include:"#punctuation-comma"}]},type:{patterns:[{include:"#comment"},{include:"#ref-modifier"},{include:"#readonly-modifier"},{include:"#tuple-type"},{include:"#type-builtin"},{include:"#type-name"},{include:"#type-arguments"},{include:"#type-array-suffix"},{include:"#type-nullable-suffix"},{include:"#type-pointer-suffix"}]},"type-arguments":{begin:new RegExp("<","dgv"),beginCaptures:{0:{name:"punctuation.definition.typeparameters.begin.cs"}},end:new RegExp(">","dgv"),endCaptures:{0:{name:"punctuation.definition.typeparameters.end.cs"}},patterns:[{include:"#type"},{include:"#punctuation-comma"}]},"type-array-suffix":{begin:new RegExp("\\[","dgv"),beginCaptures:{0:{name:"punctuation.squarebracket.open.cs"}},end:new RegExp("\\]","dgv"),endCaptures:{0:{name:"punctuation.squarebracket.close.cs"}},patterns:[{include:"#intrusive"},{include:"#punctuation-comma"}]},"type-builtin":{captures:{1:{name:"keyword.type.$1.cs"}},match:new RegExp("\\b(bool|s?byte|u?short|n?u?int|u?long|float|double|decimal|char|string|object|void|dynamic)\\b","dgv")},"type-declarations":{patterns:[{include:"#preprocessor"},{include:"#comment"},{include:"#storage-modifier"},{include:"#class-declaration"},{include:"#delegate-declaration"},{include:"#enum-declaration"},{include:"#interface-declaration"},{include:"#struct-declaration"},{include:"#record-declaration"},{include:"#attribute-section"},{include:"#punctuation-semicolon"}]},"type-name":{patterns:[{captures:{1:{name:"entity.name.type.alias.cs"},2:{name:"punctuation.separator.coloncolon.cs"}},match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(::)","dgv")},{captures:{1:{name:"entity.name.type.cs"},2:{name:"punctuation.accessor.cs"}},match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(\\.)","dgv")},{captures:{1:{name:"punctuation.accessor.cs"},2:{name:"entity.name.type.cs"}},match:new RegExp("(\\.)\\p{space}*(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)","dgv")},{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.type.cs"}]},"type-nullable-suffix":{match:new RegExp("\\?","dgv"),name:"punctuation.separator.question-mark.cs"},"type-operator-expression":{begin:new RegExp("\\b(default|sizeof|typeof)\\p{space}*(\\()","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.$1.cs"},2:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#type"}]},"type-parameter-list":{begin:new RegExp("<","dgv"),beginCaptures:{0:{name:"punctuation.definition.typeparameters.begin.cs"}},end:new RegExp(">","dgv"),endCaptures:{0:{name:"punctuation.definition.typeparameters.end.cs"}},patterns:[{match:new RegExp("\\b(in|out)\\b","dgv"),name:"storage.modifier.$1.cs"},{match:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\b","dgv"),name:"entity.name.type.type-parameter.cs"},{include:"#comment"},{include:"#punctuation-comma"},{include:"#attribute-section"}]},"type-pattern":{begin:new RegExp("(?=@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)","dgv"),end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{begin:new RegExp("(?:)","dgv"),end:new e("(?!^[\\@_\\p{Alpha}])(?=[\\(\\{\\@_\\p{Alpha}\\)\\}\\]\\,\\;\\:\\=\\&\\|\\^]|(?:\\p{space}|^)\\?|!=|\\b(and|or|when)\\b)","dgv",{strategy:"clip_search"}),patterns:[{include:"#intrusive"},{include:"#type-subpattern"}]},{begin:new RegExp("(?=[\\(\\{\\@_\\p{Alpha}])","dgv"),end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{include:"#intrusive"},{include:"#positional-pattern"},{include:"#property-pattern"},{include:"#simple-designation-pattern"}]}]},"type-pointer-suffix":{match:new RegExp("\\*","dgv"),name:"punctuation.separator.asterisk.cs"},"type-subpattern":{patterns:[{include:"#type-builtin"},{begin:new RegExp("(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(::)","dgv"),beginCaptures:{1:{name:"entity.name.type.alias.cs"},2:{name:"punctuation.separator.coloncolon.cs"}},end:new RegExp("(?<=[_\\p{Alpha}\\p{Nd}])|(?=[\\.\\<\\[\\(\\{\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{include:"#intrusive"},{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.type.cs"}]},{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.type.cs"},{begin:new RegExp("\\.","dgv"),beginCaptures:{0:{name:"punctuation.accessor.cs"}},end:new RegExp("(?<=[_\\p{Alpha}\\p{Nd}])|(?=[\\<\\[\\(\\{\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{include:"#intrusive"},{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.type.cs"}]},{include:"#type-arguments"},{include:"#type-array-suffix"},{match:new RegExp("(?<!\\p{space})\\?","dgv"),name:"punctuation.separator.question-mark.cs"}]},"using-directive":{patterns:[{begin:new RegExp("\\b(?:(global)\\p{space}+)?(using)\\p{space}+(static)\\b\\p{space}*(?:(unsafe)\\b\\p{space}*)?","dgv"),beginCaptures:{1:{name:"keyword.other.directive.global.cs"},2:{name:"keyword.other.directive.using.cs"},3:{name:"keyword.other.directive.static.cs"},4:{name:"storage.modifier.unsafe.cs"}},end:new RegExp("(?=;)","dgv"),patterns:[{include:"#type"}]},{begin:new RegExp("\\b(?:(global)\\p{space}+)?(using)\\b\\p{space}*(?:(unsafe)\\b\\p{space}*)?(@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*)\\p{space}*(=)","dgv"),beginCaptures:{1:{name:"keyword.other.directive.global.cs"},2:{name:"keyword.other.directive.using.cs"},3:{name:"storage.modifier.unsafe.cs"},4:{name:"entity.name.type.alias.cs"},5:{name:"keyword.operator.assignment.cs"}},end:new RegExp("(?=;)","dgv"),patterns:[{include:"#comment"},{include:"#type"}]},{begin:new e("\\b(?:(global)\\p{space}+)?(using)\\b(?:(?=(\\p{space}*))\\3)(?!\\(|var\\b)","dgv",{hiddenCaptures:[3]}),beginCaptures:{1:{name:"keyword.other.directive.global.cs"},2:{name:"keyword.other.directive.using.cs"}},end:new RegExp("(?=;)","dgv"),patterns:[{include:"#comment"},{match:new RegExp("@?[_\\p{Alpha}][_\\p{Alpha}\\p{Nd}]*","dgv"),name:"entity.name.type.namespace.cs"},{include:"#punctuation-accessor"},{include:"#operator-assignment"}]}]},"using-statement":{begin:new RegExp("\\b(using)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.context.using.cs"}},end:new RegExp("(?<=\\))|(?=[\\;\\}])","dgv"),patterns:[{include:"#intrusive"},{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#intrusive"},{include:"#await-expression"},{include:"#local-variable-declaration"},{include:"#expression"}]},{include:"#local-variable-declaration"}]},"var-pattern":{begin:new RegExp("\\b(var)\\b","dgv"),beginCaptures:{1:{name:"storage.type.var.cs"}},end:new RegExp("(?=[\\)\\}\\]\\,\\;\\:\\?\\=\\&\\|\\^]|!=|\\b(and|or|when)\\b)","dgv"),patterns:[{include:"#designation-pattern"}]},"variable-initializer":{begin:new RegExp("(?<![\\=\\!])(=)(?![\\=\\>])","dgv"),beginCaptures:{1:{name:"keyword.operator.assignment.cs"}},end:new RegExp("(?=[\\,\\)\\]\\;\\}])","dgv"),patterns:[{include:"#ref-modifier"},{include:"#expression"}]},"verbatim-interpolated-string":{begin:new RegExp('(?:\\$@|@\\$)"',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('"(?=[^"])',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs",patterns:[{include:"#verbatim-string-character-escape"},{include:"#interpolation"}]},"verbatim-string-character-escape":{match:new RegExp('""',"dgv"),name:"constant.character.escape.cs"},"verbatim-string-literal":{begin:new RegExp('@"',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('"(?=[^"])',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs",patterns:[{include:"#verbatim-string-character-escape"}]},"when-clause":{begin:new RegExp("(?<!\\.)\\b(when)\\b\\p{space}*(\\()","dgv"),beginCaptures:{1:{name:"keyword.control.exception.when.cs"},2:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#expression"},{include:"#comment"}]},"where-clause":{begin:new RegExp("\\b(where)\\b\\p{space}*","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.query.where.cs"}},end:new RegExp("(?=[\\;\\)])","dgv"),patterns:[{include:"#query-body"},{include:"#expression"}]},"while-statement":{begin:new RegExp("(?<!\\.)\\b(while)\\b\\p{space}*(?=\\()","dgv"),beginCaptures:{1:{name:"keyword.control.loop.while.cs"}},end:new RegExp("(?<=\\})|(?=;)","dgv"),patterns:[{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.parenthesis.open.cs"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.parenthesis.close.cs"}},patterns:[{include:"#expression"}]},{include:"#statement"}]},"with-expression":{begin:new RegExp("(?<!\\.)\\b(with)\\b\\p{space}*(?=\\{|\\/\\/|\\/\\*|(?=\\n?$))","dgv"),beginCaptures:{1:{name:"keyword.operator.expression.with.cs"}},end:new RegExp("(?<=\\})","dgv"),patterns:[{include:"#comment"},{include:"#initializer-expression"}]},"xml-attribute":{patterns:[{captures:{1:{name:"entity.other.attribute-name.cs"},2:{name:"entity.other.attribute-name.namespace.cs"},3:{name:"punctuation.separator.colon.cs"},4:{name:"entity.other.attribute-name.localname.cs"},5:{name:"punctuation.separator.equals.cs"}},match:new RegExp("(?:^|\\p{space}+)((?:([\\-_\\p{Alpha}\\p{Nd}]+)(:))?([\\-_\\p{Alpha}\\p{Nd}]+))(=)","dgv")},{include:"#xml-string"}]},"xml-cdata":{begin:new RegExp("<!\\[CDATA\\[","dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp("\\]\\]>","dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.unquoted.cdata.cs"},"xml-character-entity":{patterns:[{captures:{1:{name:"punctuation.definition.constant.cs"},3:{name:"punctuation.definition.constant.cs"}},match:new RegExp("(&)([\\p{Alpha}\\:_][\\p{Alpha}\\p{Nd}\\:_\\.\\-]*|#\\p{Nd}+|#x\\p{AHex}+)(;)","dgv"),name:"constant.character.entity.cs"},{match:new RegExp("&","dgv"),name:"invalid.illegal.bad-ampersand.cs"}]},"xml-comment":{begin:new RegExp("<!--","dgv"),beginCaptures:{0:{name:"punctuation.definition.comment.cs"}},end:new RegExp("-->","dgv"),endCaptures:{0:{name:"punctuation.definition.comment.cs"}},name:"comment.block.cs"},"xml-doc-comment":{patterns:[{include:"#xml-comment"},{include:"#xml-character-entity"},{include:"#xml-cdata"},{include:"#xml-tag"}]},"xml-string":{patterns:[{begin:new RegExp("'","dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp("'","dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.single.cs",patterns:[{include:"#xml-character-entity"}]},{begin:new RegExp('"',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.cs"}},end:new RegExp('"',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.cs"}},name:"string.quoted.double.cs",patterns:[{include:"#xml-character-entity"}]}]},"xml-tag":{begin:new RegExp("(<\\/?)((?:([\\-_\\p{Alpha}\\p{Nd}]+)(:))?([\\-_\\p{Alpha}\\p{Nd}]+))","dgv"),beginCaptures:{1:{name:"punctuation.definition.tag.cs"},2:{name:"entity.name.tag.cs"},3:{name:"entity.name.tag.namespace.cs"},4:{name:"punctuation.separator.colon.cs"},5:{name:"entity.name.tag.localname.cs"}},end:new RegExp("(\\/?>)","dgv"),endCaptures:{1:{name:"punctuation.definition.tag.cs"}},name:"meta.tag.cs",patterns:[{include:"#xml-attribute"}]},"yield-break-statement":{captures:{1:{name:"keyword.control.flow.yield.cs"},2:{name:"keyword.control.flow.break.cs"}},match:new RegExp("(?<!\\.)\\b(yield)\\b\\p{space}*\\b(break)\\b","dgv")},"yield-return-statement":{begin:new RegExp("(?<!\\.)\\b(yield)\\b\\p{space}*\\b(return)\\b","dgv"),beginCaptures:{1:{name:"keyword.control.flow.yield.cs"},2:{name:"keyword.control.flow.return.cs"}},end:new RegExp("(?=[\\;\\}])","dgv"),patterns:[{include:"#expression"}]},"yield-statement":{patterns:[{include:"#yield-return-statement"},{include:"#yield-break-statement"}]}},scopeName:"source.cs",embeddedLangs:void 0,aliases:["c#","cs"]}),n=[p];export{n as default};
