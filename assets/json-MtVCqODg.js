const n=Object.freeze({displayName:"JSON",name:"json",patterns:[{include:"#value"}],repository:{array:{begin:new RegExp("\\[","dgv"),beginCaptures:{0:{name:"punctuation.definition.array.begin.json"}},end:new RegExp("\\]","dgv"),endCaptures:{0:{name:"punctuation.definition.array.end.json"}},name:"meta.structure.array.json",patterns:[{include:"#value"},{match:new RegExp(",","dgv"),name:"punctuation.separator.array.json"},{match:new RegExp("[^\\p{space}\\]]","dgv"),name:"invalid.illegal.expected-array-separator.json"}]},comments:{patterns:[{begin:new RegExp("\\/\\*\\*(?!\\/)","dgv"),captures:{0:{name:"punctuation.definition.comment.json"}},end:new RegExp("\\*\\/","dgv"),name:"comment.block.documentation.json"},{begin:new RegExp("\\/\\*","dgv"),captures:{0:{name:"punctuation.definition.comment.json"}},end:new RegExp("\\*\\/","dgv"),name:"comment.block.json"},{captures:{1:{name:"punctuation.definition.comment.json"}},match:new RegExp("(\\/\\/)[^\\n]*(?=\\n?$)\\n?","dgv"),name:"comment.line.double-slash.js"}]},constant:{match:new RegExp("\\b(?:true|false|null)\\b","dgv"),name:"constant.language.json"},number:{match:new RegExp("-?(?:0|[1-9]\\p{Nd}*)(?:(?:\\.\\p{Nd}+)?(?:[eE][\\+\\-]?\\p{Nd}+)?)?","dgv"),name:"constant.numeric.json"},object:{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.definition.dictionary.begin.json"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.definition.dictionary.end.json"}},name:"meta.structure.dictionary.json",patterns:[{include:"#objectkey"},{include:"#comments"},{begin:new RegExp(":","dgv"),beginCaptures:{0:{name:"punctuation.separator.dictionary.key-value.json"}},end:new RegExp("(,)|(?=\\})","dgv"),endCaptures:{1:{name:"punctuation.separator.dictionary.pair.json"}},name:"meta.structure.dictionary.value.json",patterns:[{include:"#value"},{match:new RegExp("[^\\p{space}\\,]","dgv"),name:"invalid.illegal.expected-dictionary-separator.json"}]},{match:new RegExp("[^\\p{space}\\}]","dgv"),name:"invalid.illegal.expected-dictionary-separator.json"}]},objectkey:{begin:new RegExp('"',"dgv"),beginCaptures:{0:{name:"punctuation.support.type.property-name.begin.json"}},end:new RegExp('"',"dgv"),endCaptures:{0:{name:"punctuation.support.type.property-name.end.json"}},name:"string.json support.type.property-name.json",patterns:[{include:"#stringcontent"}]},string:{begin:new RegExp('"',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.json"}},end:new RegExp('"',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.json"}},name:"string.quoted.double.json",patterns:[{include:"#stringcontent"}]},stringcontent:{patterns:[{match:new RegExp('\\\\(?:["\\\\\\/bfnrt]|u\\p{AHex}{4})',"dgv"),name:"constant.character.escape.json"},{match:new RegExp("\\\\[^\\n]","dgv"),name:"invalid.illegal.unrecognized-string-escape.json"}]},value:{patterns:[{include:"#constant"},{include:"#number"},{include:"#string"},{include:"#array"},{include:"#object"},{include:"#comments"}]}},scopeName:"source.json",embeddedLangs:void 0,aliases:void 0}),e=[n];export{e as default};
