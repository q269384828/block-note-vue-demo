import{E as e}from"./index-CZv3SeAn.js";const n=Object.freeze({displayName:"Shell",name:"shellscript",patterns:[{include:"#initial_context"}],repository:{alias_statement:{begin:new e("(?:(?=([ \\t]*))\\1)(alias)(?:(?=([ \\t]*))\\3)((?:((?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])-[\\p{L}\\p{M}\\p{N}\\p{Pc}]+\\b)(?:(?=([ \\t]*))\\6))*)(?:(?=([ \\t]*))\\7)((?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))(?:(\\[)((?:(?:(?:\\$?(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])|@)|\\*)|(-?\\p{Nd}+)))(\\]))?(?:(?:(=)|(\\+=))|(-=))","dgv",{hiddenCaptures:[1,3,6,7]}),beginCaptures:{1:{name:"storage.type.alias.shell"},2:{patterns:[{match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])-[\\p{L}\\p{M}\\p{N}\\p{Pc}]+\\b","dgv"),name:"string.unquoted.argument.shell constant.other.option.shell"}]},3:{name:"string.unquoted.argument.shell constant.other.option.shell"},4:{name:"variable.other.assignment.shell"},5:{name:"punctuation.definition.array.access.shell"},6:{name:"variable.other.assignment.shell"},7:{name:"constant.numeric.shell constant.numeric.integer.shell"},8:{name:"punctuation.definition.array.access.shell"},9:{name:"keyword.operator.assignment.shell"},10:{name:"keyword.operator.assignment.compound.shell"},11:{name:"keyword.operator.assignment.compound.shell"}},end:new RegExp("(?:(?=[ \\t]|(?=\\n?$))|(?:(?:(?:(;)|(&&))|(\\|\\|))|(&)))","dgv"),endCaptures:{1:{name:"punctuation.terminator.statement.semicolon.shell"},2:{name:"punctuation.separator.statement.and.shell"},3:{name:"punctuation.separator.statement.or.shell"},4:{name:"punctuation.separator.statement.background.shell"}},name:"meta.expression.assignment.alias.shell",patterns:[{include:"#normal_context"}]},argument:{begin:new e("(?:(?=([ \\t]+))\\1)(?!(?:[\\&\\|\\(\\[\\#\\n]|(?=\\n?$)|;))","dgv",{hiddenCaptures:[1]}),beginCaptures:{},end:new RegExp("(?=[ \\t\\;\\|\\&]|(?=\\n?$)|[\\n\\)\\`])","dgv"),endCaptures:{},name:"meta.argument.shell",patterns:[{include:"#argument_context"},{include:"#line_continuation"}]},argument_context:{patterns:[{captures:{1:{name:"string.unquoted.argument.shell",patterns:[{match:new RegExp("\\*","dgv"),name:"variable.language.special.wildcard.shell"},{include:"#variable"},{include:"#numeric_literal"},{captures:{1:{name:"constant.language.$1.shell"}},match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])(\\b(?:true|false)\\b)(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])","dgv")}]}},match:new e("(?:(?=([ \\t]*))\\1)([^ \\t\\n\\>\\&\\;\\<\\(\\)\\$\\`\\\\\"'\\|]+(?!>))","dgv",{hiddenCaptures:[1]})},{include:"#normal_context"}]},arithmetic_double:{patterns:[{begin:new RegExp("\\(\\(","dgv"),beginCaptures:{0:{name:"punctuation.section.arithmetic.double.shell"}},end:new RegExp("\\)\\p{space}*\\)","dgv"),endCaptures:{0:{name:"punctuation.section.arithmetic.double.shell"}},name:"meta.arithmetic.shell",patterns:[{include:"#math"},{include:"#string"}]}]},arithmetic_no_dollar:{patterns:[{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.section.arithmetic.single.shell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.section.arithmetic.single.shell"}},name:"meta.arithmetic.shell",patterns:[{include:"#math"},{include:"#string"}]}]},array_access_inline:{captures:{1:{name:"punctuation.section.array.shell"},2:{patterns:[{include:"#special_expansion"},{include:"#string"},{include:"#variable"}]},3:{name:"punctuation.section.array.shell"}},match:new RegExp("(\\[)([^\\[\\]]+)(\\])","dgv")},array_value:{begin:new e("(?:(?=([ \\t]*))\\1)((?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))(?:(\\[)((?:(?:(?:\\$?(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])|@)|\\*)|(-?\\p{Nd}+)))(\\]))?(?:(?:(=)|(\\+=))|(-=))(?:(?=([ \\t]*))\\10)(\\()","dgv",{hiddenCaptures:[1,10]}),beginCaptures:{1:{name:"variable.other.assignment.shell"},2:{name:"punctuation.definition.array.access.shell"},3:{name:"variable.other.assignment.shell"},4:{name:"constant.numeric.shell constant.numeric.integer.shell"},5:{name:"punctuation.definition.array.access.shell"},6:{name:"keyword.operator.assignment.shell"},7:{name:"keyword.operator.assignment.compound.shell"},8:{name:"keyword.operator.assignment.compound.shell"},9:{name:"punctuation.definition.array.shell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.definition.array.shell"}},patterns:[{include:"#comment"},{captures:{1:{name:"variable.other.assignment.array.shell entity.other.attribute-name.shell"},2:{name:"keyword.operator.assignment.shell punctuation.definition.assignment.shell"}},match:new RegExp("((?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))(=)","dgv")},{captures:{1:{name:"punctuation.definition.bracket.named-array.shell"},2:{name:"string.unquoted.shell entity.other.attribute-name.bracket.shell"},3:{name:"punctuation.definition.bracket.named-array.shell"},4:{name:"punctuation.definition.assignment.shell"}},match:new RegExp("(\\[)([^\\n]+?)(\\])(=)","dgv")},{include:"#normal_context"},{include:"#simple_unquoted"}]},assignment_statement:{patterns:[{include:"#array_value"},{include:"#modified_assignment_statement"},{include:"#normal_assignment_statement"}]},basic_command_name:{captures:{1:{name:"storage.modifier.$1.shell"},2:{name:"entity.name.function.call.shell entity.name.command.shell",patterns:[{match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])(?:continue|return|break)(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])","dgv"),name:"keyword.control.$0.shell"},{match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])(?:unfunction|continue|autoload|unsetopt|bindkey|builtin|getopts|command|declare|unalias|history|unlimit|typeset|suspend|source|printf|unhash|disown|ulimit|return|which|alias|break|false|print|shift|times|umask|umask|unset|read|type|exec|eval|wait|echo|dirs|jobs|kill|hash|stat|exit|test|trap|true|let|set|pwd|cd|fg|bg|fc|[\\:\\.])(?!\\/)(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])(?!-)","dgv"),name:"support.function.builtin.shell"},{include:"#variable"}]}},match:new RegExp(`(?!(?:[\\!\\&\\|\\(\\)\\{\\[\\<\\>\\#\\n]|(?=\\n?$)|[\\; \\t]))(?!nocorrect |nocorrect\\t|nocorrect(?=\\n?$)|readonly |readonly\\t|readonly(?=\\n?$)|function |function\\t|function(?=\\n?$)|foreach |foreach\\t|foreach(?=\\n?$)|coproc |coproc\\t|coproc(?=\\n?$)|logout |logout\\t|logout(?=\\n?$)|export |export\\t|export(?=\\n?$)|select |select\\t|select(?=\\n?$)|repeat |repeat\\t|repeat(?=\\n?$)|pushd |pushd\\t|pushd(?=\\n?$)|until |until\\t|until(?=\\n?$)|while |while\\t|while(?=\\n?$)|local |local\\t|local(?=\\n?$)|case |case\\t|case(?=\\n?$)|done |done\\t|done(?=\\n?$)|elif |elif\\t|elif(?=\\n?$)|else |else\\t|else(?=\\n?$)|esac |esac\\t|esac(?=\\n?$)|popd |popd\\t|popd(?=\\n?$)|then |then\\t|then(?=\\n?$)|time |time\\t|time(?=\\n?$)|for |for\\t|for(?=\\n?$)|end |end\\t|end(?=\\n?$)|fi |fi\\t|fi(?=\\n?$)|do |do\\t|do(?=\\n?$)|in |in\\t|in(?=\\n?$)|if |if\\t|if(?=\\n?$))(?:((?<=^|[\\;\\& \\t])(?:readonly|declare|typeset|export|local)(?=[ \\t\\;\\&]|(?=\\n?$)))|((?!["']|\\\\\\n?(?=\\n?$))[^\\!'"\\<\\> \\t\\n\\r]+?))(?:(?=[ \\t])|(?=[\\;\\|\\&\\n\\)\\\`\\{\\}]|[ \\t]*#|\\])(?<!\\\\))`,"dgv"),name:"meta.statement.command.name.basic.shell"},block_comment:{begin:new e("(?:(?=(\\p{space}*))\\1)(/\\*)","dgv",{hiddenCaptures:[1]}),beginCaptures:{1:{name:"punctuation.definition.comment.begin.shell"}},end:new RegExp("\\*\\/","dgv"),endCaptures:{0:{name:"punctuation.definition.comment.end.shell"}},name:"comment.block.shell"},boolean:{match:new RegExp("\\b(?:true|false)\\b","dgv"),name:"constant.language.$0.shell"},case_statement:{begin:new e("(\\bcase\\b)(?:(?=([ \\t]*))\\2)([^\\n]+?)(?:(?=([ \\t]*))\\4)(\\bin\\b)","dgv",{hiddenCaptures:[2,4]}),beginCaptures:{1:{name:"keyword.control.case.shell"},2:{patterns:[{include:"#initial_context"}]},3:{name:"keyword.control.in.shell"}},end:new RegExp("\\besac\\b","dgv"),endCaptures:{0:{name:"keyword.control.esac.shell"}},name:"meta.case.shell",patterns:[{include:"#comment"},{captures:{1:{name:"keyword.operator.pattern.case.default.shell"}},match:new e("(?:(?=([ \\t]*))\\1)(\\* *\\))","dgv",{hiddenCaptures:[1]})},{begin:new e("(?<!\\))(?!(?:(?=([ \\t]*))\\1)(?:esac\\b|(?=\\n?$)))","dgv",{hiddenCaptures:[1]}),beginCaptures:{},end:new RegExp("(?:(?=\\besac\\b)|(\\)))","dgv"),endCaptures:{1:{name:"keyword.operator.pattern.case.shell"}},name:"meta.case.entry.pattern.shell",patterns:[{include:"#case_statement_context"}]},{begin:new RegExp("(?<=\\))","dgv"),beginCaptures:{},end:new RegExp("(?:(;;)|(?=\\besac\\b))","dgv"),endCaptures:{1:{name:"punctuation.terminator.statement.case.shell"}},name:"meta.case.entry.body.shell",patterns:[{include:"#typical_statements"},{include:"#initial_context"}]}]},case_statement_context:{patterns:[{match:new RegExp("\\*","dgv"),name:"variable.language.special.quantifier.star.shell keyword.operator.quantifier.star.shell punctuation.definition.arbitrary-repetition.shell punctuation.definition.regex.arbitrary-repetition.shell"},{match:new RegExp("\\+","dgv"),name:"variable.language.special.quantifier.plus.shell keyword.operator.quantifier.plus.shell punctuation.definition.arbitrary-repetition.shell punctuation.definition.regex.arbitrary-repetition.shell"},{match:new RegExp("\\?","dgv"),name:"variable.language.special.quantifier.question.shell keyword.operator.quantifier.question.shell punctuation.definition.arbitrary-repetition.shell punctuation.definition.regex.arbitrary-repetition.shell"},{match:new RegExp("@","dgv"),name:"variable.language.special.at.shell keyword.operator.at.shell punctuation.definition.regex.at.shell"},{match:new RegExp("\\|","dgv"),name:"keyword.operator.orvariable.language.special.or.shell keyword.operator.alternation.ruby.shell punctuation.definition.regex.alternation.shell punctuation.separator.regex.alternation.shell"},{match:new RegExp("\\\\[^\\n]","dgv"),name:"constant.character.escape.shell"},{match:new RegExp("(?<=\\tin| in|[ \\t]|;;)\\(","dgv"),name:"keyword.operator.pattern.case.shell"},{begin:new RegExp("(?<=\\P{space})(\\()","dgv"),beginCaptures:{1:{name:"punctuation.definition.group.shell punctuation.definition.regex.group.shell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.definition.group.shell punctuation.definition.regex.group.shell"}},name:"meta.parenthese.shell",patterns:[{include:"#case_statement_context"}]},{begin:new RegExp("\\[","dgv"),beginCaptures:{0:{name:"punctuation.definition.character-class.shell"}},end:new RegExp("\\]","dgv"),endCaptures:{0:{name:"punctuation.definition.character-class.shell"}},name:"string.regexp.character-class.shell",patterns:[{match:new RegExp("\\\\[^\\n]","dgv"),name:"constant.character.escape.shell"}]},{include:"#string"},{match:new RegExp("[^\\) \\t\\n\\[\\?\\*\\|\\@]","dgv"),name:"string.unquoted.pattern.shell string.regexp.unquoted.shell"}]},command_name_range:{begin:new RegExp("(?:)","dgv"),beginCaptures:{},end:new RegExp("(?:(?=[ \\t\\;\\|\\&]|(?=\\n?$)|[\\n\\)\\`])|(?=<))","dgv"),endCaptures:{},name:"meta.statement.command.name.shell",patterns:[{match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])(?:continue|return|break)(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])","dgv"),name:"entity.name.function.call.shell entity.name.command.shell keyword.control.$0.shell"},{match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])(?:unfunction|continue|autoload|unsetopt|bindkey|builtin|getopts|command|declare|unalias|history|unlimit|typeset|suspend|source|printf|unhash|disown|ulimit|return|which|alias|break|false|print|shift|times|umask|umask|unset|read|type|exec|eval|wait|echo|dirs|jobs|kill|hash|stat|exit|test|trap|true|let|set|pwd|cd|fg|bg|fc|[\\:\\.])(?!\\/)(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])(?!-)","dgv"),name:"entity.name.function.call.shell entity.name.command.shell support.function.builtin.shell"},{include:"#variable"},{captures:{1:{name:"entity.name.function.call.shell entity.name.command.shell"}},match:new e(`(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])(?<=^|['"\\}\\)])([^ \\n\\t\\r"'\\=\\;\\&\\|\\\`\\)\\{\\<\\>]+)`,"dgv",{strategy:"clip_search"})},{begin:new e(`(?:^|(?<![ \\t\\;\\|\\&\\n\\{\\#]))(\\$?)((?:(")|(')))`,"dgv",{strategy:"clip_search"}),beginCaptures:{1:{name:"meta.statement.command.name.quoted.shell punctuation.definition.string.shell entity.name.function.call.shell entity.name.command.shell"},2:{},3:{name:"meta.statement.command.name.quoted.shell string.quoted.double.shell punctuation.definition.string.begin.shell entity.name.function.call.shell entity.name.command.shell"},4:{name:"meta.statement.command.name.quoted.shell string.quoted.single.shell punctuation.definition.string.begin.shell entity.name.function.call.shell entity.name.command.shell"}},end:new e("(?<!^)(?<=\\2)()()","dgv",{strategy:"clip_search"}),endCaptures:{},patterns:[{include:"#continuation_of_single_quoted_command_name"},{include:"#continuation_of_double_quoted_command_name"}]},{include:"#line_continuation"},{include:"#simple_unquoted"}]},command_statement:{begin:new e("(?:(?=([ \\t]*))\\1)(?!(?:[\\!\\&\\|\\(\\)\\{\\[\\<\\>\\#\\n]|(?=\\n?$)|[\\; \\t]))(?!nocorrect |nocorrect\\t|nocorrect(?=\\n?$)|readonly |readonly\\t|readonly(?=\\n?$)|function |function\\t|function(?=\\n?$)|foreach |foreach\\t|foreach(?=\\n?$)|coproc |coproc\\t|coproc(?=\\n?$)|logout |logout\\t|logout(?=\\n?$)|export |export\\t|export(?=\\n?$)|select |select\\t|select(?=\\n?$)|repeat |repeat\\t|repeat(?=\\n?$)|pushd |pushd\\t|pushd(?=\\n?$)|until |until\\t|until(?=\\n?$)|while |while\\t|while(?=\\n?$)|local |local\\t|local(?=\\n?$)|case |case\\t|case(?=\\n?$)|done |done\\t|done(?=\\n?$)|elif |elif\\t|elif(?=\\n?$)|else |else\\t|else(?=\\n?$)|esac |esac\\t|esac(?=\\n?$)|popd |popd\\t|popd(?=\\n?$)|then |then\\t|then(?=\\n?$)|time |time\\t|time(?=\\n?$)|for |for\\t|for(?=\\n?$)|end |end\\t|end(?=\\n?$)|fi |fi\\t|fi(?=\\n?$)|do |do\\t|do(?=\\n?$)|in |in\\t|in(?=\\n?$)|if |if\\t|if(?=\\n?$))(?!\\\\\\n?(?=\\n?$))","dgv",{hiddenCaptures:[1]}),beginCaptures:{},end:new RegExp("(?=[\\;\\|\\&\\n\\)\\`\\{\\}]|[ \\t]*#|\\])(?<!\\\\)","dgv"),endCaptures:{},name:"meta.statement.command.shell",patterns:[{include:"#command_name_range"},{include:"#line_continuation"},{include:"#option"},{include:"#argument"},{include:"#string"},{include:"#heredoc"}]},comment:{captures:{1:{name:"comment.line.number-sign.shell meta.shebang.shell"},2:{name:"punctuation.definition.comment.shebang.shell"},3:{name:"comment.line.number-sign.shell"},4:{name:"punctuation.definition.comment.shell"}},match:new e("(?:^|(?:(?=([ \\t]+))\\1))(?:((#!)[^\\n]*)|((#)[^\\n]*))","dgv",{hiddenCaptures:[1]})},comments:{patterns:[{include:"#block_comment"},{include:"#line_comment"}]},"compound-command":{patterns:[{begin:new RegExp("\\[","dgv"),beginCaptures:{0:{name:"punctuation.definition.logical-expression.shell"}},end:new RegExp("\\]","dgv"),endCaptures:{0:{name:"punctuation.definition.logical-expression.shell"}},name:"meta.scope.logical-expression.shell",patterns:[{include:"#logical-expression"},{include:"#initial_context"}]},{begin:new RegExp("(?<=\\p{space}|^)\\{(?=\\p{space}|(?=\\n?$))","dgv"),beginCaptures:{0:{name:"punctuation.definition.group.shell"}},end:new RegExp("(?<=^|;)\\p{space}*(\\})","dgv"),endCaptures:{1:{name:"punctuation.definition.group.shell"}},name:"meta.scope.group.shell",patterns:[{include:"#initial_context"}]}]},continuation_of_double_quoted_command_name:{begin:new RegExp('(?<=")',"dgvy"),beginCaptures:{},contentName:"meta.statement.command.name.continuation string.quoted.double entity.name.function.call entity.name.command",end:new RegExp('"',"dgv"),endCaptures:{0:{name:"string.quoted.double.shell punctuation.definition.string.end.shell entity.name.function.call.shell entity.name.command.shell"}},patterns:[{match:new RegExp('\\\\[\\$\\n\\`"\\\\]',"dgv"),name:"constant.character.escape.shell"},{include:"#variable"},{include:"#interpolation"}]},continuation_of_single_quoted_command_name:{begin:new RegExp("(?<=')","dgvy"),beginCaptures:{},contentName:"meta.statement.command.name.continuation string.quoted.single entity.name.function.call entity.name.command",end:new RegExp("'","dgv"),endCaptures:{0:{name:"string.quoted.single.shell punctuation.definition.string.end.shell entity.name.function.call.shell entity.name.command.shell"}}},custom_command_names:{patterns:[]},custom_commands:{patterns:[]},double_quote_context:{patterns:[{match:new RegExp('\\\\[\\$\\`"\\\\\\n]',"dgv"),name:"constant.character.escape.shell"},{include:"#variable"},{include:"#interpolation"}]},double_quote_escape_char:{match:new RegExp('\\\\[\\$\\`"\\\\\\n]',"dgv"),name:"constant.character.escape.shell"},floating_keyword:{patterns:[{match:new RegExp("(?<=^|[\\;\\& \\t])(?:then|elif|else|done|end|do|if|fi)(?=[ \\t\\;\\&]|(?=\\n?$))","dgv"),name:"keyword.control.$0.shell"}]},for_statement:{patterns:[{begin:new e("(\\bfor\\b)(?:(?=([ \\t]*))\\2)((?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))(?:(?=([ \\t]*))\\4)(\\bin\\b)","dgv",{hiddenCaptures:[2,4]}),beginCaptures:{1:{name:"keyword.control.for.shell"},2:{name:"variable.other.for.shell"},3:{name:"keyword.control.in.shell"}},end:new RegExp("(?=[\\;\\|\\&\\n\\)\\`\\{\\}]|[ \\t]*#|\\])(?<!\\\\)","dgv"),endCaptures:{},name:"meta.for.in.shell",patterns:[{include:"#string"},{include:"#simple_unquoted"},{include:"#normal_context"}]},{begin:new RegExp("(\\bfor\\b)","dgv"),beginCaptures:{1:{name:"keyword.control.for.shell"}},end:new RegExp("(?=[\\;\\|\\&\\n\\)\\`\\{\\}]|[ \\t]*#|\\])(?<!\\\\)","dgv"),endCaptures:{},name:"meta.for.shell",patterns:[{include:"#arithmetic_double"},{include:"#normal_context"}]}]},function_definition:{applyEndPatternLast:1,begin:new e(`(?:(?=([ \\t]*))\\1)(?:(\\bfunction\\b)(?:(?=([ \\t]*))\\3)([^ \\t\\n\\r\\(\\)\\="']+)(?:(\\()(?:(?=([ \\t]*))\\6)(\\)))?|([^ \\t\\n\\r\\(\\)\\="']+)(?:(?=([ \\t]*))\\9)(\\()(?:(?=([ \\t]*))\\11)(\\)))`,"dgv",{hiddenCaptures:[1,3,6,9,11]}),beginCaptures:{1:{name:"storage.type.function.shell"},2:{name:"entity.name.function.shell"},3:{name:"punctuation.definition.arguments.shell"},4:{name:"punctuation.definition.arguments.shell"},5:{name:"entity.name.function.shell"},6:{name:"punctuation.definition.arguments.shell"},7:{name:"punctuation.definition.arguments.shell"}},end:new RegExp("(?<=[\\}\\)])","dgv"),endCaptures:{},name:"meta.function.shell",patterns:[{match:new RegExp("[\\t \\n]","dgvy")},{begin:new RegExp("\\{","dgv"),beginCaptures:{0:{name:"punctuation.definition.group.shell punctuation.section.function.definition.shell"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.definition.group.shell punctuation.section.function.definition.shell"}},name:"meta.function.body.shell",patterns:[{include:"#initial_context"}]},{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.definition.group.shell punctuation.section.function.definition.shell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.definition.group.shell punctuation.section.function.definition.shell"}},name:"meta.function.body.shell",patterns:[{include:"#initial_context"}]},{include:"#initial_context"}]},heredoc:{patterns:[{begin:new e(`((?<!<)<<-)(?:(?=([ \\t]*))\\2)(["'])(?:(?=([ \\t]*))\\4)([^"']+?)(?=[\\p{space}\\;\\&\\<"'])(\\3)([^\\n]*)`,"dgv",{hiddenCaptures:[2,4]}),beginCaptures:{1:{name:"keyword.operator.heredoc.shell"},2:{name:"punctuation.definition.string.heredoc.quote.shell"},3:{name:"punctuation.definition.string.heredoc.delimiter.shell"},4:{name:"punctuation.definition.string.heredoc.quote.shell"},5:{patterns:[{include:"#redirect_fix"},{include:"#typical_statements"}]}},contentName:"string.quoted.heredoc.indent.$3",end:new RegExp("^\\t*\\3(?=[\\p{space}\\;\\&]|(?=\\n?$))()()()","dgv"),endCaptures:{0:{name:"punctuation.definition.string.heredoc.$0.shell"}},patterns:[]},{begin:new e(`((?<!<)<<(?!<))(?:(?=([ \\t]*))\\2)(["'])(?:(?=([ \\t]*))\\4)([^"']+?)(?=[\\p{space}\\;\\&\\<"'])(\\3)([^\\n]*)`,"dgv",{hiddenCaptures:[2,4]}),beginCaptures:{1:{name:"keyword.operator.heredoc.shell"},2:{name:"punctuation.definition.string.heredoc.quote.shell"},3:{name:"punctuation.definition.string.heredoc.delimiter.shell"},4:{name:"punctuation.definition.string.heredoc.quote.shell"},5:{patterns:[{include:"#redirect_fix"},{include:"#typical_statements"}]}},contentName:"string.quoted.heredoc.no-indent.$3",end:new RegExp("^\\3(?=[\\p{space}\\;\\&]|(?=\\n?$))()()()","dgv"),endCaptures:{0:{name:"punctuation.definition.string.heredoc.delimiter.shell"}},patterns:[]},{begin:new e(`((?<!<)<<-)(?:(?=([ \\t]*))\\2)([^"' \\t]+)(?=[\\p{space}\\;\\&\\<"'])([^\\n]*)`,"dgv",{hiddenCaptures:[2]}),beginCaptures:{1:{name:"keyword.operator.heredoc.shell"},2:{name:"punctuation.definition.string.heredoc.delimiter.shell"},3:{patterns:[{include:"#redirect_fix"},{include:"#typical_statements"}]}},contentName:"string.unquoted.heredoc.indent.$2",end:new RegExp("^\\t*\\2(?=[\\p{space}\\;\\&]|(?=\\n?$))()()","dgv"),endCaptures:{0:{name:"punctuation.definition.string.heredoc.delimiter.shell"}},patterns:[{include:"#double_quote_escape_char"},{include:"#variable"},{include:"#interpolation"}]},{begin:new e(`((?<!<)<<(?!<))(?:(?=([ \\t]*))\\2)([^"' \\t]+)(?=[\\p{space}\\;\\&\\<"'])([^\\n]*)`,"dgv",{hiddenCaptures:[2]}),beginCaptures:{1:{name:"keyword.operator.heredoc.shell"},2:{name:"punctuation.definition.string.heredoc.delimiter.shell"},3:{patterns:[{include:"#redirect_fix"},{include:"#typical_statements"}]}},contentName:"string.unquoted.heredoc.no-indent.$2",end:new RegExp("^\\2(?=[\\p{space}\\;\\&]|(?=\\n?$))()()","dgv"),endCaptures:{0:{name:"punctuation.definition.string.heredoc.delimiter.shell"}},patterns:[{include:"#double_quote_escape_char"},{include:"#variable"},{include:"#interpolation"}]}]},herestring:{patterns:[{begin:new RegExp("(<<<)\\p{space}*(('))","dgv"),beginCaptures:{1:{name:"keyword.operator.herestring.shell"},2:{name:"string.quoted.single.shell"},3:{name:"punctuation.definition.string.begin.shell"}},contentName:"string.quoted.single.shell",end:new RegExp("(')","dgv"),endCaptures:{0:{name:"string.quoted.single.shell"},1:{name:"punctuation.definition.string.end.shell"}},name:"meta.herestring.shell"},{begin:new RegExp('(<<<)\\p{space}*(("))',"dgv"),beginCaptures:{1:{name:"keyword.operator.herestring.shell"},2:{name:"string.quoted.double.shell"},3:{name:"punctuation.definition.string.begin.shell"}},contentName:"string.quoted.double.shell",end:new RegExp('(")',"dgv"),endCaptures:{0:{name:"string.quoted.double.shell"},1:{name:"punctuation.definition.string.end.shell"}},name:"meta.herestring.shell",patterns:[{include:"#double_quote_context"}]},{captures:{1:{name:"keyword.operator.herestring.shell"},2:{name:"string.unquoted.herestring.shell",patterns:[{include:"#initial_context"}]}},match:new RegExp("(<<<)\\p{space}*(([^\\p{space}\\)\\\\]|\\\\[^\\n])+)","dgv"),name:"meta.herestring.shell"}]},initial_context:{patterns:[{include:"#comment"},{include:"#pipeline"},{include:"#normal_statement_seperator"},{include:"#logical_expression_double"},{include:"#logical_expression_single"},{include:"#assignment_statement"},{include:"#case_statement"},{include:"#for_statement"},{include:"#loop"},{include:"#function_definition"},{include:"#line_continuation"},{include:"#arithmetic_double"},{include:"#misc_ranges"},{include:"#variable"},{include:"#interpolation"},{include:"#heredoc"},{include:"#herestring"},{include:"#redirection"},{include:"#pathname"},{include:"#floating_keyword"},{include:"#alias_statement"},{include:"#normal_statement"},{include:"#string"},{include:"#support"}]},inline_comment:{captures:{1:{name:"comment.block.shell punctuation.definition.comment.begin.shell"},2:{name:"comment.block.shell"},3:{patterns:[{match:new RegExp("\\*\\/","dgv"),name:"comment.block.shell punctuation.definition.comment.end.shell"},{match:new RegExp("\\*","dgv"),name:"comment.block.shell"}]}},match:new e("(/\\*)((?:(?=((?:[^\\*]|(?:(?=(\\*+))\\4)[^\\/])*))\\3)((?:(?=(\\*+))\\6)/))","dgv",{hiddenCaptures:[3,4,6]})},interpolation:{patterns:[{include:"#arithmetic_dollar"},{include:"#subshell_dollar"},{begin:new RegExp("`","dgv"),beginCaptures:{0:{name:"punctuation.definition.evaluation.backticks.shell"}},end:new RegExp("`","dgv"),endCaptures:{0:{name:"punctuation.definition.evaluation.backticks.shell"}},name:"string.interpolated.backtick.shell",patterns:[{match:new RegExp("\\\\[\\`\\\\\\$]","dgv"),name:"constant.character.escape.shell"},{begin:new RegExp("(?<=[^\\p{L}\\p{M}\\p{N}\\p{Pc}])(?=#)(?!#\\{)","dgv"),beginCaptures:{1:{name:"punctuation.whitespace.comment.leading.shell"}},end:new e("(?!^)","dgv",{strategy:"clip_search"}),patterns:[{begin:new RegExp("#","dgv"),beginCaptures:{0:{name:"punctuation.definition.comment.shell"}},end:new RegExp("(?=`)","dgv"),name:"comment.line.number-sign.shell"}]},{include:"#initial_context"}]}]},keyword:{patterns:[{match:new RegExp("(?<=^|[\\;\\&\\p{space}])(then|else|elif|fi|for|in|do|done|select|continue|esac|while|until|return)(?=[\\p{space}\\;\\&]|(?=\\n?$))","dgv"),name:"keyword.control.shell"},{match:new RegExp("(?<=^|[\\;\\&\\p{space}])(?:export|declare|typeset|local|readonly)(?=[\\p{space}\\;\\&]|(?=\\n?$))","dgv"),name:"storage.modifier.shell"}]},line_comment:{begin:new e("(?:(?=(\\p{space}*))\\1)(//)","dgv",{hiddenCaptures:[1]}),beginCaptures:{1:{name:"punctuation.definition.comment.shell"}},end:new RegExp("(?<=\\n)(?<!\\\\\\n)","dgv"),endCaptures:{},name:"comment.line.double-slash.shell",patterns:[{include:"#line_continuation_character"}]},line_continuation:{match:new RegExp("\\\\(?=\\n)","dgv"),name:"constant.character.escape.line-continuation.shell"},"logical-expression":{patterns:[{include:"#arithmetic_no_dollar"},{match:new RegExp("=[\\=\\~]?|!=?|[\\<\\>]|&&|\\|\\|","dgv"),name:"keyword.operator.logical.shell"},{match:new RegExp("(?<!\\P{space})-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])\\b","dgv"),name:"keyword.operator.logical.shell"}]},logical_expression_context:{patterns:[{include:"#regex_comparison"},{include:"#arithmetic_no_dollar"},{include:"#logical-expression"},{include:"#logical_expression_single"},{include:"#logical_expression_double"},{include:"#comment"},{include:"#boolean"},{include:"#redirect_number"},{include:"#numeric_literal"},{include:"#pipeline"},{include:"#normal_statement_seperator"},{include:"#string"},{include:"#variable"},{include:"#interpolation"},{include:"#heredoc"},{include:"#herestring"},{include:"#pathname"},{include:"#floating_keyword"},{include:"#support"}]},logical_expression_double:{begin:new RegExp("\\[\\[","dgv"),beginCaptures:{0:{name:"punctuation.definition.logical-expression.shell"}},end:new RegExp("\\]\\]","dgv"),endCaptures:{0:{name:"punctuation.definition.logical-expression.shell"}},name:"meta.scope.logical-expression.shell",patterns:[{include:"#logical_expression_context"}]},logical_expression_single:{begin:new RegExp("\\[","dgv"),beginCaptures:{0:{name:"punctuation.definition.logical-expression.shell"}},end:new RegExp("\\]","dgv"),endCaptures:{0:{name:"punctuation.definition.logical-expression.shell"}},name:"meta.scope.logical-expression.shell",patterns:[{include:"#logical_expression_context"}]},loop:{patterns:[{begin:new RegExp("(?<=^|[\\;\\&\\p{space}])(for)\\p{space}+([^\\n]+?)\\p{space}+(in)(?=[\\p{space}\\;\\&]|(?=\\n?$))","dgv"),beginCaptures:{1:{name:"keyword.control.shell"},2:{name:"variable.other.loop.shell",patterns:[{include:"#string"}]},3:{name:"keyword.control.shell"}},end:new RegExp("(?<=^|[\\;\\&\\p{space}])done(?=[\\p{space}\\;\\&]|(?=\\n?$)|\\))","dgv"),endCaptures:{0:{name:"keyword.control.shell"}},name:"meta.scope.for-in-loop.shell",patterns:[{include:"#initial_context"}]},{begin:new RegExp("(?<=^|[\\;\\&\\p{space}])(while|until)(?=[\\p{space}\\;\\&]|(?=\\n?$))","dgv"),beginCaptures:{1:{name:"keyword.control.shell"}},end:new RegExp("(?<=^|[\\;\\&\\p{space}])done(?=[\\p{space}\\;\\&]|(?=\\n?$)|\\))","dgv"),endCaptures:{0:{name:"keyword.control.shell"}},name:"meta.scope.while-loop.shell",patterns:[{include:"#initial_context"}]},{begin:new RegExp("(?<=^|[\\;\\&\\p{space}])(select)\\p{space}+((?:[^\\p{space}\\\\]|\\\\[^\\n])+)(?=[\\p{space}\\;\\&]|(?=\\n?$))","dgv"),beginCaptures:{1:{name:"keyword.control.shell"},2:{name:"variable.other.loop.shell"}},end:new RegExp("(?<=^|[\\;\\&\\p{space}])(done)(?=[\\p{space}\\;\\&]|(?=\\n?$)|\\))","dgv"),endCaptures:{1:{name:"keyword.control.shell"}},name:"meta.scope.select-block.shell",patterns:[{include:"#initial_context"}]},{begin:new RegExp("(?<=^|[\\;\\&\\p{space}])if(?=[\\p{space}\\;\\&]|(?=\\n?$))","dgv"),beginCaptures:{0:{name:"keyword.control.if.shell"}},end:new RegExp("(?<=^|[\\;\\&\\p{space}])fi(?=[\\p{space}\\;\\&]|(?=\\n?$))","dgv"),endCaptures:{0:{name:"keyword.control.fi.shell"}},name:"meta.scope.if-block.shell",patterns:[{include:"#initial_context"}]}]},math:{patterns:[{include:"#variable"},{match:new RegExp("\\+{1,2}|-{1,2}|[\\!\\~]|\\*{1,2}|[\\/\\%]|<[\\<\\=]?|>[\\>\\=]?|==|!=|^|\\|{1,2}|&{1,2}|[\\?\\:\\,\\=]|[\\*\\/\\%\\+\\-\\&\\^\\|]=|<<=|>>=","dgv"),name:"keyword.operator.arithmetic.shell"},{match:new RegExp("0[xX]\\p{AHex}+","dgv"),name:"constant.numeric.hex.shell"},{match:new RegExp(";","dgv"),name:"punctuation.separator.semicolon.range"},{match:new RegExp("0\\p{Nd}+","dgv"),name:"constant.numeric.octal.shell"},{match:new RegExp("\\p{Nd}{1,2}#[0-9a-zA-Z\\@_]+","dgv"),name:"constant.numeric.other.shell"},{match:new RegExp("\\p{Nd}+","dgv"),name:"constant.numeric.integer.shell"},{match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])","dgv"),name:"variable.other.normal.shell"}]},math_operators:{patterns:[{match:new RegExp("\\+{1,2}|-{1,2}|[\\!\\~]|\\*{1,2}|[\\/\\%]|<[\\<\\=]?|>[\\>\\=]?|==|!=|^|\\|{1,2}|&{1,2}|[\\?\\:\\,\\=]|[\\*\\/\\%\\+\\-\\&\\^\\|]=|<<=|>>=","dgv"),name:"keyword.operator.arithmetic.shell"},{match:new RegExp("0[xX]\\p{AHex}+","dgv"),name:"constant.numeric.hex.shell"},{match:new RegExp("0\\p{Nd}+","dgv"),name:"constant.numeric.octal.shell"},{match:new RegExp("\\p{Nd}{1,2}#[0-9a-zA-Z\\@_]+","dgv"),name:"constant.numeric.other.shell"},{match:new RegExp("\\p{Nd}+","dgv"),name:"constant.numeric.integer.shell"}]},misc_ranges:{patterns:[{include:"#logical_expression_single"},{include:"#logical_expression_double"},{include:"#subshell_dollar"},{begin:new RegExp("(?<![^ \\t])(\\{)(?![\\p{L}\\p{M}\\p{N}\\p{Pc}\\$])","dgv"),beginCaptures:{1:{name:"punctuation.definition.group.shell"}},end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.definition.group.shell"}},name:"meta.scope.group.shell",patterns:[{include:"#initial_context"}]}]},modified_assignment_statement:{begin:new RegExp("(?<=^|[\\;\\& \\t])(?:readonly|declare|typeset|export|local)(?=[ \\t\\;\\&]|(?=\\n?$))","dgv"),beginCaptures:{0:{name:"storage.modifier.$0.shell"}},end:new RegExp("(?=[\\;\\|\\&\\n\\)\\`\\{\\}]|[ \\t]*#|\\])(?<!\\\\)","dgv"),endCaptures:{},name:"meta.statement.shell meta.expression.assignment.modified.shell",patterns:[{match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])-[\\p{L}\\p{M}\\p{N}\\p{Pc}]+\\b","dgv"),name:"string.unquoted.argument.shell constant.other.option.shell"},{include:"#array_value"},{captures:{1:{name:"variable.other.assignment.shell"},2:{name:"punctuation.definition.array.access.shell"},3:{name:"variable.other.assignment.shell"},4:{name:"constant.numeric.shell constant.numeric.integer.shell"},5:{name:"punctuation.definition.array.access.shell"},6:{name:"keyword.operator.assignment.shell"},7:{name:"keyword.operator.assignment.compound.shell"},8:{name:"keyword.operator.assignment.compound.shell"},9:{name:"constant.numeric.shell constant.numeric.hex.shell"},10:{name:"constant.numeric.shell constant.numeric.octal.shell"},11:{name:"constant.numeric.shell constant.numeric.other.shell"},12:{name:"constant.numeric.shell constant.numeric.decimal.shell"},13:{name:"constant.numeric.shell constant.numeric.version.shell"},14:{name:"constant.numeric.shell constant.numeric.integer.shell"}},match:new RegExp("((?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))(?:(\\[)((?:(?:(?:\\$?(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])|@)|\\*)|(-?\\p{Nd}+)))(\\]))?(?:(?:(=)|(\\+=))|(-=))?(?:(?<=[\\= \\t]|^|[\\{\\(\\[])(?:(?:(?:(?:(?:(0[xX]\\p{AHex}+)|(0\\p{Nd}+))|(\\p{Nd}{1,2}#[0-9a-zA-Z\\@_]+))|(-?\\p{Nd}+\\.\\p{Nd}+))|(-?\\p{Nd}+(?:\\.\\p{Nd}+)+))|(-?\\p{Nd}+))(?=[ \\t]|(?=\\n?$)|[\\}\\)\\;]))?","dgv")},{include:"#normal_context"}]},modifiers:{match:new RegExp("(?<=^|[\\;\\& \\t])(?:readonly|declare|typeset|export|local)(?=[ \\t\\;\\&]|(?=\\n?$))","dgv"),name:"storage.modifier.$0.shell"},normal_assignment_statement:{begin:new e("(?:(?=([ \\t]*))\\1)((?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))(?:(\\[)((?:(?:(?:\\$?(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])|@)|\\*)|(-?\\p{Nd}+)))(\\]))?(?:(?:(=)|(\\+=))|(-=))","dgv",{hiddenCaptures:[1]}),beginCaptures:{1:{name:"variable.other.assignment.shell"},2:{name:"punctuation.definition.array.access.shell"},3:{name:"variable.other.assignment.shell"},4:{name:"constant.numeric.shell constant.numeric.integer.shell"},5:{name:"punctuation.definition.array.access.shell"},6:{name:"keyword.operator.assignment.shell"},7:{name:"keyword.operator.assignment.compound.shell"},8:{name:"keyword.operator.assignment.compound.shell"}},end:new RegExp("(?=[\\;\\|\\&\\n\\)\\`\\{\\}]|[ \\t]*#|\\])(?<!\\\\)","dgv"),endCaptures:{},name:"meta.expression.assignment.shell",patterns:[{include:"#comment"},{include:"#string"},{include:"#normal_assignment_statement"},{begin:new RegExp("(?<=[ \\t])(?![ \\t]|[\\p{L}\\p{M}\\p{N}\\p{Pc}]+=)","dgv"),beginCaptures:{},end:new RegExp("(?=[\\;\\|\\&\\n\\)\\`\\{\\}]|[ \\t]*#|\\])(?<!\\\\)","dgv"),endCaptures:{},name:"meta.statement.command.env.shell",patterns:[{include:"#command_name_range"},{include:"#line_continuation"},{include:"#option"},{include:"#argument"},{include:"#string"}]},{include:"#simple_unquoted"},{include:"#normal_context"}]},normal_context:{patterns:[{include:"#comment"},{include:"#pipeline"},{include:"#normal_statement_seperator"},{include:"#misc_ranges"},{include:"#boolean"},{include:"#redirect_number"},{include:"#numeric_literal"},{include:"#string"},{include:"#variable"},{include:"#interpolation"},{include:"#heredoc"},{include:"#herestring"},{include:"#redirection"},{include:"#pathname"},{include:"#floating_keyword"},{include:"#support"},{include:"#parenthese"}]},normal_statement:{begin:new e("(?!^(?:(?=([ \\t]*))\\1)(?=\\n?$))(?:(?<=^until | until |\\tuntil |^while | while |\\twhile |^elif | elif |\\telif |^else | else |\\telse |^then | then |\\tthen |^do | do |\\tdo |^if | if |\\tif )|(?<=(?:^|[\\;\\|\\&\\!\\(\\{\\`])))(?:(?=([ \\t]*))\\2)(?!nocorrect[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|nocorrect\\$|function[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|function\\$|foreach[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|foreach\\$|repeat[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|repeat\\$|logout[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|logout\\$|coproc[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|coproc\\$|select[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|select\\$|while[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|while\\$|pushd[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|pushd\\$|until[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|until\\$|case[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|case\\$|done[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|done\\$|elif[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|elif\\$|else[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|else\\$|esac[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|esac\\$|popd[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|popd\\$|then[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|then\\$|time[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|time\\$|for[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|for\\$|end[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|end\\$|fi[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|fi\\$|do[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|do\\$|in[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|in\\$|if[^\\p{L}\\p{M}\\p{N}\\p{Pc}]|if\\$)","dgv",{hiddenCaptures:[1,2]}),beginCaptures:{},end:new RegExp("(?=[\\;\\|\\&\\n\\)\\`\\{\\}]|[ \\t]*#|\\])(?<!\\\\)","dgv"),endCaptures:{},name:"meta.statement.shell",patterns:[{include:"#typical_statements"}]},normal_statement_seperator:{captures:{1:{name:"punctuation.terminator.statement.semicolon.shell"},2:{name:"punctuation.separator.statement.and.shell"},3:{name:"punctuation.separator.statement.or.shell"},4:{name:"punctuation.separator.statement.background.shell"}},match:new RegExp("(?:(?:(?:(;)|(&&))|(\\|\\|))|(&))","dgv")},numeric_literal:{captures:{1:{name:"constant.numeric.shell constant.numeric.hex.shell"},2:{name:"constant.numeric.shell constant.numeric.octal.shell"},3:{name:"constant.numeric.shell constant.numeric.other.shell"},4:{name:"constant.numeric.shell constant.numeric.decimal.shell"},5:{name:"constant.numeric.shell constant.numeric.version.shell"},6:{name:"constant.numeric.shell constant.numeric.integer.shell"}},match:new RegExp("(?<=[\\= \\t]|^|[\\{\\(\\[])(?:(?:(?:(?:(?:(0[xX]\\p{AHex}+)|(0\\p{Nd}+))|(\\p{Nd}{1,2}#[0-9a-zA-Z\\@_]+))|(-?\\p{Nd}+\\.\\p{Nd}+))|(-?\\p{Nd}+(?:\\.\\p{Nd}+)+))|(-?\\p{Nd}+))(?=[ \\t]|(?=\\n?$)|[\\}\\)\\;])","dgv")},option:{begin:new e("(?:(?=([ \\t]+))\\1)(-)((?!(?:[\\!\\&\\|\\(\\)\\{\\[\\<\\>\\#\\n]|(?=\\n?$)|[\\; \\t])))","dgv",{hiddenCaptures:[1]}),beginCaptures:{1:{name:"string.unquoted.argument.shell constant.other.option.dash.shell"},2:{name:"string.unquoted.argument.shell constant.other.option.shell"}},contentName:"string.unquoted.argument constant.other.option",end:new RegExp("(?:(?=[ \\t])|(?=[\\;\\|\\&\\n\\)\\`\\{\\}]|[ \\t]*#|\\])(?<!\\\\))","dgv"),endCaptures:{},patterns:[{include:"#option_context"}]},option_context:{patterns:[{include:"#misc_ranges"},{include:"#string"},{include:"#variable"},{include:"#interpolation"},{include:"#heredoc"},{include:"#herestring"},{include:"#redirection"},{include:"#pathname"},{include:"#floating_keyword"},{include:"#support"}]},parenthese:{patterns:[{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.section.parenthese.shell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.section.parenthese.shell"}},name:"meta.parenthese.group.shell",patterns:[{include:"#initial_context"}]}]},pathname:{patterns:[{match:new RegExp("(?<=[\\p{space}\\:\\=]|^)~","dgv"),name:"keyword.operator.tilde.shell"},{match:new RegExp("[\\*\\?]","dgv"),name:"keyword.operator.glob.shell"},{begin:new RegExp("([\\?\\*\\+\\@\\!])(\\()","dgv"),beginCaptures:{1:{name:"keyword.operator.extglob.shell"},2:{name:"punctuation.definition.extglob.shell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.definition.extglob.shell"}},name:"meta.structure.extglob.shell",patterns:[{include:"#initial_context"}]}]},pipeline:{patterns:[{match:new RegExp("(?<=^|[\\;\\&\\p{space}])(time)(?=[\\p{space}\\;\\&]|(?=\\n?$))","dgv"),name:"keyword.other.shell"},{match:new RegExp("[\\|\\!]","dgv"),name:"keyword.operator.pipe.shell"}]},redirect_fix:{captures:{1:{name:"keyword.operator.redirect.shell"},2:{name:"string.unquoted.argument.shell"}},match:new e("(>>?)(?:(?=([ \\t]*))\\2)([^ \\t\\n\\>\\&\\;\\<\\(\\)\\$\\`\\\\\"'\\|]+)","dgv",{hiddenCaptures:[2]})},redirect_number:{captures:{1:{name:"keyword.operator.redirect.stdout.shell"},2:{name:"keyword.operator.redirect.stderr.shell"},3:{name:"keyword.operator.redirect.$3.shell"}},match:new RegExp("(?<=[ \\t])(?:(1)|(2)|(\\p{Nd}+))(?=>)","dgv")},redirection:{patterns:[{begin:new RegExp("[\\>\\<]\\(","dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.shell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.shell"}},name:"string.interpolated.process-substitution.shell",patterns:[{include:"#initial_context"}]},{match:new RegExp("(?<![\\<\\>])(&>|\\p{Nd}*>&\\p{Nd}*|\\p{Nd}*(>>|[\\>\\<])|\\p{Nd}*<&|\\p{Nd}*<>)(?![\\<\\>])","dgv"),name:"keyword.operator.redirect.shell"}]},regex_comparison:{match:new RegExp("=~","dgv"),name:"keyword.operator.logical.regex.shell"},regexp:{patterns:[{match:new RegExp("[^\\n]+","dgv")}]},simple_options:{captures:{0:{patterns:[{captures:{1:{name:"string.unquoted.argument.shell constant.other.option.dash.shell"},2:{name:"string.unquoted.argument.shell constant.other.option.shell"}},match:new e("(?:(?=([ \\t]+))\\1)(-)([\\p{L}\\p{M}\\p{N}\\p{Pc}]+)","dgv",{hiddenCaptures:[1]})}]}},match:new e("(?:(?:(?=([ \\t]+))\\1)-[\\p{L}\\p{M}\\p{N}\\p{Pc}]+)*","dgv",{hiddenCaptures:[1]})},simple_unquoted:{match:new RegExp("[^ \\t\\n\\>\\&\\;\\<\\(\\)\\$\\`\\\\\"'\\|]","dgv"),name:"string.unquoted.shell"},special_expansion:{match:new RegExp("!|:[\\-\\=\\?]?|[\\*\\@]|##|#|%%|[\\%\\/]","dgv"),name:"keyword.operator.expansion.shell"},start_of_command:{match:new e("(?:(?=([ \\t]*))\\1)(?!(?:[\\!\\&\\|\\(\\)\\{\\[\\<\\>\\#\\n]|(?=\\n?$)|[\\; \\t]))(?!nocorrect |nocorrect\\t|nocorrect(?=\\n?$)|readonly |readonly\\t|readonly(?=\\n?$)|function |function\\t|function(?=\\n?$)|foreach |foreach\\t|foreach(?=\\n?$)|coproc |coproc\\t|coproc(?=\\n?$)|logout |logout\\t|logout(?=\\n?$)|export |export\\t|export(?=\\n?$)|select |select\\t|select(?=\\n?$)|repeat |repeat\\t|repeat(?=\\n?$)|pushd |pushd\\t|pushd(?=\\n?$)|until |until\\t|until(?=\\n?$)|while |while\\t|while(?=\\n?$)|local |local\\t|local(?=\\n?$)|case |case\\t|case(?=\\n?$)|done |done\\t|done(?=\\n?$)|elif |elif\\t|elif(?=\\n?$)|else |else\\t|else(?=\\n?$)|esac |esac\\t|esac(?=\\n?$)|popd |popd\\t|popd(?=\\n?$)|then |then\\t|then(?=\\n?$)|time |time\\t|time(?=\\n?$)|for |for\\t|for(?=\\n?$)|end |end\\t|end(?=\\n?$)|fi |fi\\t|fi(?=\\n?$)|do |do\\t|do(?=\\n?$)|in |in\\t|in(?=\\n?$)|if |if\\t|if(?=\\n?$))(?!\\\\\\n?(?=\\n?$))","dgv",{hiddenCaptures:[1]})},string:{patterns:[{match:new RegExp("\\\\[^\\n]","dgv"),name:"constant.character.escape.shell"},{begin:new RegExp("'","dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.shell"}},end:new RegExp("'","dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.shell"}},name:"string.quoted.single.shell"},{begin:new RegExp('\\$?"',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.shell"}},end:new RegExp('"',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.shell"}},name:"string.quoted.double.shell",patterns:[{match:new RegExp('\\\\[\\$\\n\\`"\\\\]',"dgv"),name:"constant.character.escape.shell"},{include:"#variable"},{include:"#interpolation"}]},{begin:new RegExp("\\$'","dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.shell"}},end:new RegExp("'","dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.shell"}},name:"string.quoted.single.dollar.shell",patterns:[{match:new RegExp("\\\\[abefnrtv\\\\']","dgv"),name:"constant.character.escape.ansi-c.shell"},{match:new RegExp('\\\\[0-9]{3}"',"dgv"),name:"constant.character.escape.octal.shell"},{match:new RegExp('\\\\x\\p{AHex}{2}"',"dgv"),name:"constant.character.escape.hex.shell"},{match:new RegExp('\\\\c[^\\n]"',"dgv"),name:"constant.character.escape.control-char.shell"}]}]},subshell_dollar:{patterns:[{begin:new RegExp("\\$\\(","dgv"),beginCaptures:{0:{name:"punctuation.definition.subshell.single.shell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.definition.subshell.single.shell"}},name:"meta.scope.subshell",patterns:[{include:"#parenthese"},{include:"#initial_context"}]}]},support:{patterns:[{match:new RegExp("(?<=^|[\\;\\&\\p{space}])[\\:\\.](?=[\\p{space}\\;\\&]|(?=\\n?$))","dgv"),name:"support.function.builtin.shell"}]},typical_statements:{patterns:[{include:"#assignment_statement"},{include:"#case_statement"},{include:"#for_statement"},{include:"#while_statement"},{include:"#function_definition"},{include:"#command_statement"},{include:"#line_continuation"},{include:"#arithmetic_double"},{include:"#normal_context"}]},variable:{patterns:[{captures:{1:{name:"punctuation.definition.variable.shell variable.parameter.positional.all.shell"},2:{name:"variable.parameter.positional.all.shell"}},match:new RegExp("(\\$)(@(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))","dgv")},{captures:{1:{name:"punctuation.definition.variable.shell variable.parameter.positional.shell"},2:{name:"variable.parameter.positional.shell"}},match:new RegExp("(\\$)([0-9](?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))","dgv")},{captures:{1:{name:"punctuation.definition.variable.shell variable.language.special.shell"},2:{name:"variable.language.special.shell"}},match:new RegExp("(\\$)([\\-\\*\\#\\?\\$\\!0_](?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))","dgv")},{begin:new e("(\\$)(\\{)(?:(?=([ \\t]*))\\3)(?=\\p{Nd})","dgv",{hiddenCaptures:[3]}),beginCaptures:{1:{name:"punctuation.definition.variable.shell variable.parameter.positional.shell"},2:{name:"punctuation.section.bracket.curly.variable.begin.shell punctuation.definition.variable.shell variable.parameter.positional.shell"}},contentName:"meta.parameter-expansion",end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.section.bracket.curly.variable.end.shell punctuation.definition.variable.shell variable.parameter.positional.shell"}},patterns:[{include:"#special_expansion"},{include:"#array_access_inline"},{match:new RegExp("[0-9]+","dgv"),name:"variable.parameter.positional.shell"},{match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])","dgv"),name:"variable.other.normal.shell"},{include:"#variable"},{include:"#string"}]},{begin:new RegExp("(\\$)(\\{)","dgv"),beginCaptures:{1:{name:"punctuation.definition.variable.shell"},2:{name:"punctuation.section.bracket.curly.variable.begin.shell punctuation.definition.variable.shell"}},contentName:"meta.parameter-expansion",end:new RegExp("\\}","dgv"),endCaptures:{0:{name:"punctuation.section.bracket.curly.variable.end.shell punctuation.definition.variable.shell"}},patterns:[{include:"#special_expansion"},{include:"#array_access_inline"},{match:new RegExp("(?<![\\p{L}\\p{M}\\p{N}\\p{Pc}])[a-zA-Z_0-9\\-]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}])","dgv"),name:"variable.other.normal.shell"},{include:"#variable"},{include:"#string"}]},{captures:{1:{name:"punctuation.definition.variable.shell variable.other.normal.shell"},2:{name:"variable.other.normal.shell"}},match:new RegExp("(\\$)([\\p{L}\\p{M}\\p{N}\\p{Pc}]+(?![\\p{L}\\p{M}\\p{N}\\p{Pc}]))","dgv")}]},while_statement:{patterns:[{begin:new RegExp("(\\bwhile\\b)","dgv"),beginCaptures:{1:{name:"keyword.control.while.shell"}},end:new RegExp("(?=[\\;\\|\\&\\n\\)\\`\\{\\}]|[ \\t]*#|\\])(?<!\\\\)","dgv"),endCaptures:{},name:"meta.while.shell",patterns:[{include:"#line_continuation"},{include:"#math_operators"},{include:"#option"},{include:"#simple_unquoted"},{include:"#normal_context"},{include:"#string"}]}]}},scopeName:"source.shell",embeddedLangs:void 0,aliases:["bash","sh","shell","zsh"]}),a=[n];export{a as default};
