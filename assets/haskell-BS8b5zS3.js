import{E as e}from"./index-BOTDIo30.js";const a=Object.freeze({displayName:"Haskell",fileTypes:["hs","hs-boot","hsig"],name:"haskell",patterns:[{include:"#liquid_haskell"},{include:"#comment_like"},{include:"#numeric_literals"},{include:"#string_literal"},{include:"#char_literal"},{match:new RegExp("(?<![\\@\\#])-\\}","dgv"),name:"invalid"},{captures:{1:{name:"punctuation.paren.haskell"},2:{name:"punctuation.paren.haskell"}},match:new RegExp("(\\()\\p{space}*(\\))","dgv"),name:"constant.language.unit.haskell"},{captures:{1:{name:"punctuation.paren.haskell"},2:{name:"keyword.operator.hash.haskell"},3:{name:"keyword.operator.hash.haskell"},4:{name:"punctuation.paren.haskell"}},match:new RegExp("(\\()(#)\\p{space}*(#)(\\))","dgv"),name:"constant.language.unit.unboxed.haskell"},{captures:{1:{name:"punctuation.paren.haskell"},2:{name:"punctuation.paren.haskell"}},match:new RegExp("(\\()\\p{space}*,[\\p{space}\\,]*(\\))","dgv"),name:"support.constant.tuple.haskell"},{captures:{1:{name:"punctuation.paren.haskell"},2:{name:"keyword.operator.hash.haskell"},3:{name:"keyword.operator.hash.haskell"},4:{name:"punctuation.paren.haskell"}},match:new RegExp("(\\()(#)\\p{space}*,[\\p{space}\\,]*(#)(\\))","dgv"),name:"support.constant.tuple.unboxed.haskell"},{captures:{1:{name:"punctuation.bracket.haskell"},2:{name:"punctuation.bracket.haskell"}},match:new RegExp("(\\[)\\p{space}*(\\])","dgv"),name:"constant.language.empty-list.haskell"},{begin:new RegExp("(\\b(?<!')(module)|^(signature))(\\b(?!'))","dgv"),beginCaptures:{2:{name:"keyword.other.module.haskell"},3:{name:"keyword.other.signature.haskell"}},end:new RegExp("(?=\\b(?<!')where\\b(?!'))","dgv"),name:"meta.declaration.module.haskell",patterns:[{include:"#comment_like"},{include:"#module_name"},{include:"#module_exports"},{match:new RegExp("[a-z]+","dgv"),name:"invalid"}]},{include:"#ffi"},{begin:new RegExp("^(\\p{space}*)(class)(\\b(?!'))","dgv"),beginCaptures:{2:{name:"keyword.other.class.haskell"}},end:new RegExp("(?=(?<!')\\bwhere\\b(?!'))|(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),name:"meta.declaration.class.haskell",patterns:[{include:"#comment_like"},{include:"#where"},{include:"#type_signature"}]},{begin:new RegExp("^(\\p{space}*)(data|newtype)(?:\\p{space}+(instance))?\\p{space}+((?:(?!(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(?:=|--+)(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])|\\b(?<!')(?:where|deriving)\\b(?!')|\\{-)[^\\n])*)(?=\\b(?<!'')where\\b(?!''))","dgv"),beginCaptures:{2:{name:"keyword.other.$2.haskell"},3:{name:"keyword.other.instance.haskell"},4:{patterns:[{include:"#type_signature"}]}},end:new RegExp("(?=(?<!')\\bderiving\\b(?!'))|(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),name:"meta.declaration.$2.generalized.haskell",patterns:[{include:"#comment_like"},{begin:new RegExp("(?<!')\\b(where)\\p{space}*(\\{)(?!-)","dgv"),beginCaptures:{1:{name:"keyword.other.where.haskell"},2:{name:"punctuation.brace.haskell"}},end:new RegExp("(\\})","dgv"),endCaptures:{1:{name:"punctuation.brace.haskell"}},patterns:[{include:"#comment_like"},{include:"#gadt_constructor"},{match:new RegExp(";","dgv"),name:"punctuation.semicolon.haskell"}]},{match:new RegExp("\\b(?<!')(where)\\b(?!')","dgv"),name:"keyword.other.where.haskell"},{include:"#deriving"},{include:"#gadt_constructor"}]},{include:"#role_annotation"},{begin:new RegExp("^(\\p{space}*)(pattern)\\p{space}+([^\\n]*?)\\p{space}+(::|∷)(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])","dgv"),beginCaptures:{2:{name:"keyword.other.pattern.haskell"},3:{patterns:[{include:"#comma"},{include:"#data_constructor"}]},4:{name:"keyword.operator.double-colon.haskell"}},end:new RegExp("(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),name:"meta.declaration.pattern.type.haskell",patterns:[{include:"#type_signature"}]},{begin:new RegExp("^\\p{space}*(pattern)\\b(?!')","dgv"),captures:{1:{name:"keyword.other.pattern.haskell"}},end:new RegExp("(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),name:"meta.declaration.pattern.haskell",patterns:[{include:"$self"}]},{begin:new RegExp("^(\\p{space}*)(data|newtype)(?:\\p{space}+(family|instance))?\\p{space}+(((?!(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(?:=|--+)(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])|\\b(?<!')(?:where|deriving)\\b(?!')|\\{-)[^\\n])*)","dgv"),beginCaptures:{2:{name:"keyword.other.$2.haskell"},3:{name:"keyword.other.$3.haskell"},4:{patterns:[{include:"#type_signature"}]}},end:new RegExp("(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),name:"meta.declaration.$2.algebraic.haskell",patterns:[{include:"#comment_like"},{include:"#deriving"},{include:"#forall"},{include:"#adt_constructor"},{include:"#context"},{include:"#record_decl"},{include:"#type_signature"}]},{begin:new RegExp("^(\\p{space}*)(type)\\p{space}+(family)\\b(?!')(((?!(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(?:=|--+)(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])|\\b(?<!')where\\b(?!')|\\{-)[^\\n])*)","dgv"),beginCaptures:{2:{name:"keyword.other.type.haskell"},3:{name:"keyword.other.family.haskell"},4:{patterns:[{include:"#comment_like"},{include:"#where"},{include:"#type_signature"}]}},end:new RegExp("(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),name:"meta.declaration.type.family.haskell",patterns:[{include:"#comment_like"},{include:"#where"},{include:"#type_signature"}]},{begin:new RegExp("^(\\p{space}*)(type)(?:\\p{space}+(instance))?\\p{space}+(((?!(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(?:=|--+|::|∷)(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])|\\{-)[^\\n])*)","dgv"),beginCaptures:{2:{name:"keyword.other.type.haskell"},3:{name:"keyword.other.instance.haskell"},4:{patterns:[{include:"#type_signature"}]}},end:new RegExp("(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),name:"meta.declaration.type.haskell",patterns:[{include:"#type_signature"}]},{begin:new RegExp("^(\\p{space}*)(instance)(\\b(?!'))","dgv"),beginCaptures:{2:{name:"keyword.other.instance.haskell"}},end:new RegExp("(?=\\b(?<!')(where)\\b(?!'))|(?=[\\}\\;])|^(?!(?!)\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))","dgv"),name:"meta.declaration.instance.haskell",patterns:[{include:"#comment_like"},{include:"#where"},{include:"#type_signature"}]},{begin:new RegExp("^(\\p{space}*)(import)(\\b(?!'))","dgv"),beginCaptures:{2:{name:"keyword.other.import.haskell"}},end:new RegExp("(?=\\b(?<!')(where)\\b(?!'))|(?=[\\}\\;])|^(?!(?!)\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))","dgv"),name:"meta.import.haskell",patterns:[{include:"#comment_like"},{include:"#where"},{captures:{1:{name:"keyword.other.$1.haskell"}},match:new RegExp("(qualified|as|hiding)","dgv")},{include:"#module_name"},{include:"#module_exports"}]},{include:"#deriving"},{include:"#layout_herald"},{include:"#keyword"},{captures:{1:{name:"keyword.other.$1.haskell"},2:{patterns:[{include:"#comment_like"},{include:"#integer_literals"},{include:"#infix_op"}]}},match:new RegExp("^\\p{space}*(infix[lr]?)\\p{space}+([^\\n]*)","dgv"),name:"meta.fixity-declaration.haskell"},{include:"#overloaded_label"},{include:"#type_application"},{include:"#reserved_symbol"},{include:"#fun_decl"},{include:"#qualifier"},{include:"#data_constructor"},{include:"#start_type_signature"},{include:"#prefix_op"},{include:"#infix_op"},{begin:new RegExp("(\\()(#)\\p{space}","dgv"),beginCaptures:{1:{name:"punctuation.paren.haskell"},2:{name:"keyword.operator.hash.haskell"}},end:new RegExp("(#)(\\))","dgv"),endCaptures:{1:{name:"keyword.operator.hash.haskell"},2:{name:"punctuation.paren.haskell"}},patterns:[{include:"#comma"},{include:"$self"}]},{begin:new RegExp("(\\()","dgv"),beginCaptures:{1:{name:"punctuation.paren.haskell"}},end:new RegExp("(\\))","dgv"),endCaptures:{1:{name:"punctuation.paren.haskell"}},patterns:[{include:"#comma"},{include:"$self"}]},{include:"#quasi_quote"},{begin:new RegExp("(\\[)","dgv"),beginCaptures:{1:{name:"punctuation.bracket.haskell"}},end:new RegExp("(\\])","dgv"),endCaptures:{1:{name:"punctuation.bracket.haskell"}},patterns:[{include:"#comma"},{include:"$self"}]},{include:"#record"}],repository:{adt_constructor:{patterns:[{include:"#comment_like"},{begin:new RegExp("(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(?:(=)|(\\|))(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])","dgv"),beginCaptures:{1:{name:"keyword.operator.eq.haskell"},2:{name:"keyword.operator.pipe.haskell"}},end:new e("(?:^|^)\\p{space}*(?:(?<!')\\b([\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'\\.]+)|('?(?<paren>\\((?:[^\\(\\)]?|(?:\\((?:[^\\(\\)]?|(?:\\((?:[^\\(\\)]?|(?:\\((?:[^\\(\\)]?|(?:\\((?:[^\\(\\)]?|(?:))*\\)))*\\)))*\\)))*\\)))*\\)))|('?(?<brac>\\((?:[^\\[\\]]?|(?:\\((?:[^\\[\\]]?|(?:\\((?:[^\\[\\]]?|(?:\\((?:[^\\[\\]]?|(?:\\((?:[^\\[\\]]?|(?:))*\\]))*\\]))*\\]))*\\]))*\\])))\\p{space}*(?:(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(:[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]*)|(`)([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)(`))|(?<!')\\b([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)|(\\()\\p{space}*(:[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]*)\\p{space}*(\\))","dgv",{strategy:"clip_search"}),endCaptures:{1:{patterns:[{include:"#type_signature"}]},2:{patterns:[{include:"#type_signature"}]},4:{patterns:[{include:"#type_signature"}]},6:{name:"constant.other.operator.haskell"},7:{name:"punctuation.backtick.haskell"},8:{name:"constant.other.haskell"},9:{name:"punctuation.backtick.haskell"},10:{name:"constant.other.haskell"},11:{name:"punctuation.paren.haskell"},12:{name:"constant.other.operator.haskell"},13:{name:"punctuation.paren.haskell"}},patterns:[{include:"#comment_like"},{include:"#deriving"},{include:"#record_decl"},{include:"#forall"},{include:"#context"}]}]},block_comment:{applyEndPatternLast:1,begin:new RegExp("\\{-","dgv"),captures:{0:{name:"punctuation.definition.comment.haskell"}},end:new RegExp("-\\}","dgv"),name:"comment.block.haskell",patterns:[{include:"#block_comment"}]},char_literal:{captures:{1:{name:"punctuation.definition.string.begin.haskell"},2:{name:"constant.character.escape.haskell"},3:{name:"constant.character.escape.octal.haskell"},4:{name:"constant.character.escape.hexadecimal.haskell"},5:{name:"constant.character.escape.control.haskell"},6:{name:"punctuation.definition.string.end.haskell"}},match:new RegExp(`(?<![\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'])(')(?:[ -\\[\\]-\\~]|(\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\"'\\&]))|(\\\\o[0-7]+)|(\\\\x\\p{AHex}+)|(\\\\\\^[A-Z\\@\\[\\]\\\\\\^_]))(')`,"dgv"),name:"string.quoted.single.haskell"},comma:{match:new RegExp(",","dgv"),name:"punctuation.separator.comma.haskell"},comment_like:{patterns:[{include:"#cpp"},{include:"#pragma"},{include:"#comments"}]},comments:{patterns:[{begin:new RegExp("^(\\p{space}*)(--\\p{space}[\\|\\$])","dgv"),beginCaptures:{2:{name:"punctuation.whitespace.comment.leading.haskell"}},end:new RegExp("(?=^(?!\\1--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])))()","dgv"),name:"comment.block.documentation.haskell"},{begin:new RegExp("(^[ \\t]+)?(--\\p{space}[\\^\\*])","dgv"),beginCaptures:{1:{name:"punctuation.whitespace.comment.leading.haskell"}},end:new RegExp("\\n","dgv"),name:"comment.line.documentation.haskell"},{applyEndPatternLast:1,begin:new RegExp("\\{-\\p{space}?[\\|\\$\\*\\^]","dgv"),captures:{0:{name:"punctuation.definition.comment.haskell"}},end:new RegExp("-\\}","dgv"),name:"comment.block.documentation.haskell",patterns:[{include:"#block_comment"}]},{begin:new RegExp("(^[ \\t]+)?(?=--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]))","dgv"),beginCaptures:{1:{name:"punctuation.whitespace.comment.leading.haskell"}},end:new e("(?!^)","dgv",{strategy:"clip_search"}),patterns:[{begin:new RegExp("--","dgv"),beginCaptures:{0:{name:"punctuation.definition.comment.haskell"}},end:new RegExp("\\n","dgv"),name:"comment.line.double-dash.haskell"}]},{include:"#block_comment"}]},context:{captures:{1:{patterns:[{include:"#comment_like"},{include:"#type_signature"}]},2:{name:"keyword.operator.big-arrow.haskell"}},match:new RegExp("([^\\n]*)(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(=>|⇒)(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])","dgv")},cpp:{captures:{1:{name:"punctuation.definition.preprocessor.c"}},match:new RegExp("^(#)[^\\n]*(?=\\n?$)","dgv"),name:"meta.preprocessor.c"},data_constructor:{match:new RegExp("\\b(?<!')[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(?![\\.'\\p{L}\\p{M}\\p{N}\\p{Pc}])","dgv"),name:"constant.other.haskell"},deriving:{patterns:[{begin:new RegExp("^(\\p{space}*)(deriving)\\p{space}+(?:(via|stock|newtype|anyclass)\\p{space}+)?","dgv"),beginCaptures:{2:{name:"keyword.other.deriving.haskell"},3:{name:"keyword.other.deriving.strategy.$3.haskell"}},end:new RegExp("(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),name:"meta.deriving.haskell",patterns:[{include:"#comment_like"},{match:new RegExp("(?<!')\\b(instance)\\b(?!')","dgv"),name:"keyword.other.instance.haskell"},{captures:{1:{name:"keyword.other.deriving.strategy.$1.haskell"}},match:new RegExp("(?<!')\\b(via|stock|newtype|anyclass)\\b(?!')","dgv")},{include:"#type_signature"}]},{begin:new RegExp("(deriving)(?:\\p{space}+(stock|newtype|anyclass))?\\p{space}*(\\()","dgv"),beginCaptures:{1:{name:"keyword.other.deriving.haskell"},2:{name:"keyword.other.deriving.strategy.$2.haskell"},3:{name:"punctuation.paren.haskell"}},end:new RegExp("(\\))","dgv"),endCaptures:{1:{name:"punctuation.paren.haskell"}},name:"meta.deriving.haskell",patterns:[{include:"#type_signature"}]},{captures:{1:{name:"keyword.other.deriving.haskell"},2:{name:"keyword.other.deriving.strategy.$2.haskell"},3:{patterns:[{include:"#type_signature"}]},5:{name:"keyword.other.deriving.strategy.via.haskell"},6:{patterns:[{include:"#type_signature"}]}},match:new RegExp("(deriving)(?:\\p{space}+(stock|newtype|anyclass))?\\p{space}+([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)(\\p{space}+(via)\\p{space}+([^\\n]*)(?=\\n?$))?","dgv"),name:"meta.deriving.haskell"},{match:new RegExp("(?<!')\\b(via)\\b(?!')","dgv"),name:"keyword.other.deriving.strategy.via.haskell"}]},double_colon:{captures:{1:{name:"keyword.operator.double-colon.haskell"}},match:new RegExp("\\p{space}*(::|∷)(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])\\p{space}*","dgv")},export_constructs:{patterns:[{include:"#comment_like"},{begin:new RegExp("\\b(?<!')(pattern)\\b(?!')","dgv"),beginCaptures:{1:{name:"keyword.other.pattern.haskell"}},end:new RegExp("([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)|(\\()\\p{space}*(:[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]+)\\p{space}*(\\))","dgv"),endCaptures:{1:{name:"constant.other.haskell"},2:{name:"punctuation.paren.haskell"},3:{name:"constant.other.operator.haskell"},4:{name:"punctuation.paren.haskell"}},patterns:[{include:"#comment_like"}]},{begin:new RegExp("\\b(?<!')(type)\\b(?!')","dgv"),beginCaptures:{1:{name:"keyword.other.type.haskell"}},end:new RegExp("([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)|(\\()\\p{space}*([[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]+)\\p{space}*(\\))","dgv"),endCaptures:{1:{name:"storage.type.haskell"},2:{name:"punctuation.paren.haskell"},3:{name:"storage.type.operator.haskell"},4:{name:"punctuation.paren.haskell"}},patterns:[{include:"#comment_like"}]},{match:new RegExp("(?<!')\\b[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*","dgv"),name:"entity.name.function.haskell"},{match:new RegExp("(?<!')\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*","dgv"),name:"storage.type.haskell"},{include:"#record_wildcard"},{include:"#reserved_symbol"},{include:"#prefix_op"}]},ffi:{begin:new RegExp("^(\\p{space}*)(foreign)\\p{space}+(import|export)\\p{space}+","dgv"),beginCaptures:{2:{name:"keyword.other.foreign.haskell"},3:{name:"keyword.other.$3.haskell"}},end:new RegExp("(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),name:"meta.$3.foreign.haskell",patterns:[{include:"#comment_like"},{captures:{1:{name:"keyword.other.calling-convention.$1.haskell"}},match:new RegExp("\\b(?<!')(ccall|cplusplus|dotnet|jvm|stdcall|prim|capi)\\p{space}+","dgv")},{begin:new RegExp(`(?=")|(?=\\b(?<!')([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)\\b(?!'))`,"dgv"),end:new RegExp("(?=(::|∷)(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]))","dgv"),patterns:[{include:"#comment_like"},{captures:{1:{name:"keyword.other.safety.$1.haskell"},2:{name:"entity.name.foreign.haskell",patterns:[{include:"#string_literal"}]},3:{name:"entity.name.function.haskell"},4:{name:"entity.name.function.infix.haskell"}},match:new RegExp(`\\b(?<!')(safe|unsafe|interruptible)\\b(?!')\\p{space}*("(?:\\\\"|[^"])*")?\\p{space}*(?:\\b(?<!'')([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)\\b(?!')|\\(\\p{space}*(?!--+\\))([[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\\`\\{\\}_"']]+)\\p{space}*\\))`,"dgv")},{captures:{1:{name:"keyword.other.safety.$1.haskell"},2:{name:"entity.name.foreign.haskell",patterns:[{include:"#string_literal"}]}},match:new RegExp(`\\b(?<!')(safe|unsafe|interruptible)\\b(?!')\\p{space}*("(?:\\\\"|[^"])*")?\\p{space}*(?=\\n?$)`,"dgv")},{captures:{0:{name:"entity.name.foreign.haskell",patterns:[{include:"#string_literal"}]}},match:new RegExp('"(?:\\\\"|[^"])*"',"dgv")},{captures:{1:{name:"entity.name.function.haskell"},2:{name:"punctuation.paren.haskell"},3:{name:"entity.name.function.infix.haskell"},4:{name:"punctuation.paren.haskell"}},match:new RegExp("\\b(?<!'')([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)\\b(?!')|(\\()\\p{space}*(?!--+\\))([[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]+)\\p{space}*(\\))","dgv")}]},{include:"#double_colon"},{include:"#type_signature"}]},float_literals:{captures:{1:{name:"constant.numeric.floating.decimal.haskell"},2:{name:"constant.numeric.floating.hexadecimal.haskell"}},match:new RegExp("\\b(?<!')(?:([0-9][_0-9]*\\.[0-9][_0-9]*(?:[eE][\\-\\+]?[0-9][_0-9]*)?|[0-9][_0-9]*[eE][\\-\\+]?[0-9][_0-9]*)|(0(?:[xX]_*\\p{AHex}[_\\p{AHex}]*\\.\\p{AHex}[_\\p{AHex}]*(?:[pP][\\-\\+]?[0-9][_0-9]*)?|[xX]_*\\p{AHex}[_\\p{AHex}]*[pP][\\-\\+]?[0-9][_0-9]*)))\\b(?!')","dgv")},forall:{begin:new RegExp("\\b(?<!')(forall|∀)\\b(?!')","dgv"),beginCaptures:{1:{name:"keyword.other.forall.haskell"}},end:new RegExp("(\\.)|(->|→)","dgv"),endCaptures:{1:{name:"keyword.operator.period.haskell"},2:{name:"keyword.operator.arrow.haskell"}},patterns:[{include:"#comment_like"},{include:"#type_variable"},{include:"#type_signature"}]},fun_decl:{begin:new RegExp("^(\\p{space}*)(?<fn>(?:[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*#*|\\(\\p{space}*(?!--+\\))[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\:\\;\\[\\]\\`\\{\\}_\"']][[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]*\\p{space}*\\))(?:\\p{space}*,\\p{space}*(?:(?:[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*#*|\\(\\p{space}*(?!--+\\))[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\:\\;\\[\\]\\`\\{\\}_\"']][[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]*\\p{space}*\\))(?:\\p{space}*,\\p{space}*(?:(?:[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*#*|\\(\\p{space}*(?!--+\\))[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\:\\;\\[\\]\\`\\{\\}_\"']][[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]*\\p{space}*\\))(?:\\p{space}*,\\p{space}*(?:(?:[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*#*|\\(\\p{space}*(?!--+\\))[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\:\\;\\[\\]\\`\\{\\}_\"']][[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]*\\p{space}*\\))(?:\\p{space}*,\\p{space}*(?:(?:[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*#*|\\(\\p{space}*(?!--+\\))[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\:\\;\\[\\]\\`\\{\\}_\"']][[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]*\\p{space}*\\))(?:\\p{space}*,\\p{space}*(?:))?))?))?))?))?)\\p{space}*(?<![[\\p{S}\\p{P}]&&[^\\)\\,\\;\\]\\`\\}_\"']])(::|∷)(?![[\\p{S}\\p{P}]&&[^\\(\\,\\;\\[\\`\\{_\"']])","dgv"),beginCaptures:{2:{name:"entity.name.function.haskell",patterns:[{include:"#reserved_symbol"},{include:"#prefix_op"}]},3:{name:"keyword.operator.double-colon.haskell"}},end:new RegExp("(?=(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])((<-|←)|(=)|(-<|↢)|(-<<|⤛))([\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"'[^\\p{S}\\p{P}]]))|(?=[\\}\\;])|^(?!(?!)\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))","dgv"),name:"meta.function.type-declaration.haskell",patterns:[{include:"#type_signature"}]},gadt_constructor:{patterns:[{begin:new RegExp("^(\\p{space}*)(?:(\\b(?<!')[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)|(\\()\\p{space}*(:[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]*)\\p{space}*(\\)))","dgv"),beginCaptures:{2:{name:"constant.other.haskell"},3:{name:"punctuation.paren.haskell"},4:{name:"constant.other.operator.haskell"},5:{name:"punctuation.paren.haskell"}},end:new RegExp("(?=\\b(?<!'')deriving\\b(?!'))|(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),patterns:[{include:"#comment_like"},{include:"#deriving"},{include:"#double_colon"},{include:"#record_decl"},{include:"#type_signature"}]},{begin:new RegExp("(\\b(?<!')[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)|(\\()\\p{space}*(:[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]*)\\p{space}*(\\))","dgv"),beginCaptures:{1:{name:"constant.other.haskell"},2:{name:"punctuation.paren.haskell"},3:{name:"constant.other.operator.haskell"},4:{name:"punctuation.paren.haskell"}},end:new RegExp("(?=\\n?$)","dgv"),patterns:[{include:"#comment_like"},{include:"#deriving"},{include:"#double_colon"},{include:"#record_decl"},{include:"#type_signature"}]}]},infix_op:{patterns:[{captures:{1:{name:"keyword.operator.promotion.haskell"},2:{name:"entity.name.namespace.haskell"},3:{name:"keyword.operator.infix.haskell"}},match:new RegExp("((?:(?<!'')('')?[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.)*)(#+|[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]+(?<!#))","dgv")},{captures:{1:{name:"punctuation.backtick.haskell"},2:{name:"entity.name.namespace.haskell"},3:{patterns:[{include:"#data_constructor"}]},4:{name:"punctuation.backtick.haskell"}},match:new RegExp("(`)((?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.)*)([\\p{Ll}\\p{Lu}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)(`)","dgv"),name:"keyword.operator.function.infix.haskell"}]},inline_phase:{begin:new RegExp("\\[","dgv"),beginCaptures:{0:{name:"punctuation.bracket.haskell"}},end:new RegExp("\\]","dgv"),endCaptures:{0:{name:"punctuation.bracket.haskell"}},name:"meta.inlining-phase.haskell",patterns:[{match:new RegExp("~","dgv"),name:"punctuation.tilde.haskell"},{include:"#integer_literals"},{match:new RegExp("[\\p{L}\\p{M}\\p{N}\\p{Pc}]*","dgv"),name:"invalid"}]},integer_literals:{captures:{1:{name:"constant.numeric.integral.decimal.haskell"},2:{name:"constant.numeric.integral.hexadecimal.haskell"},3:{name:"constant.numeric.integral.octal.haskell"},4:{name:"constant.numeric.integral.binary.haskell"}},match:new RegExp("\\b(?<!')(?:([0-9][_0-9]*)|(0[xX]_*\\p{AHex}[_\\p{AHex}]*)|(0[oO]_*[0-7][_0-7]*)|(0[bB]_*[01][_01]*))\\b(?!')","dgv")},keyword:{captures:{1:{name:"keyword.other.$1.haskell"},2:{name:"keyword.control.$2.haskell"}},match:new RegExp("\\b(?<!')(?:(where|let|in|default)|(m?do|if|then|else|case|of|proc|rec))\\b(?!')","dgv")},layout_herald:{begin:new RegExp("(?<!')\\b(?:(where|let|m?do)|(of))\\p{space}*(\\{)(?!-)","dgv"),beginCaptures:{1:{name:"keyword.other.$1.haskell"},2:{name:"keyword.control.of.haskell"},3:{name:"punctuation.brace.haskell"}},end:new RegExp("(\\})","dgv"),endCaptures:{1:{name:"punctuation.brace.haskell"}},patterns:[{include:"$self"},{match:new RegExp(";","dgv"),name:"punctuation.semicolon.haskell"}]},liquid_haskell:{begin:new RegExp("\\{-@","dgv"),end:new RegExp("@-\\}","dgv"),name:"block.liquidhaskell.haskell",patterns:[{include:"$self"}]},module_exports:{applyEndPatternLast:1,begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.paren.haskell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.paren.haskell"}},name:"meta.declaration.exports.haskell",patterns:[{include:"#comment_like"},{captures:{1:{name:"keyword.other.module.haskell"}},match:new RegExp("\\b(?<!')(module)\\b(?!')","dgv")},{include:"#comma"},{include:"#export_constructs"},{begin:new RegExp("\\(","dgv"),beginCaptures:{0:{name:"punctuation.paren.haskell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.paren.haskell"}},patterns:[{include:"#comment_like"},{include:"#record_wildcard"},{include:"#export_constructs"},{include:"#comma"}]}]},module_name:{match:new e("(?<conid>[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(\\.(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(\\.(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(\\.(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(\\.(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(\\.(?:))?))?))?))?))?)","dgv",{hiddenCaptures:[3,4,5,6]}),name:"entity.name.namespace.haskell"},numeric_literals:{patterns:[{include:"#float_literals"},{include:"#integer_literals"}]},overloaded_label:{patterns:[{captures:{1:{name:"keyword.operator.prefix.hash.haskell"},2:{patterns:[{include:"#string_literal"}]}},match:new RegExp('(?<![[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{S}\\p{P}]&&[^\\(\\,\\;\\[\\`\\{]])(#)(?:("(?:\\\\"|[^"])*")|[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\'\\.]+)',"dgv"),name:"entity.name.label.haskell"}]},pragma:{begin:new RegExp("\\{-#","dgv"),end:new RegExp("#-\\}","dgv"),name:"meta.preprocessor.haskell",patterns:[{begin:new RegExp("\\b(?<!')(LANGUAGE)\\b(?!')","dgiv"),beginCaptures:{1:{name:"keyword.other.preprocessor.pragma.haskell"}},end:new RegExp("(?=#-\\})","dgv"),patterns:[{match:new RegExp("(?:No)?(?:AutoDeriveTypeable|DatatypeContexts|DoRec|IncoherentInstances|MonadFailDesugaring|MonoPatBinds|NullaryTypeClasses|OverlappingInstances|PatternSignatures|RecordPuns|RelaxedPolyRec)","dgv"),name:"invalid.deprecated"},{captures:{1:{name:"keyword.other.preprocessor.extension.haskell"}},match:new RegExp("((?:No)?(?:AllowAmbiguousTypes|AlternativeLayoutRule|AlternativeLayoutRuleTransitional|Arrows|BangPatterns|BinaryLiterals|CApiFFI|CPP|CUSKs|ConstrainedClassMethods|ConstraintKinds|DataKinds|DefaultSignatures|DeriveAnyClass|DeriveDataTypeable|DeriveFoldable|DeriveFunctor|DeriveGeneric|DeriveLift|DeriveTraversable|DerivingStrategies|DerivingVia|DisambiguateRecordFields|DoAndIfThenElse|BlockArguments|DuplicateRecordFields|EmptyCase|EmptyDataDecls|EmptyDataDeriving|ExistentialQuantification|ExplicitForAll|ExplicitNamespaces|ExtendedDefaultRules|FlexibleContexts|FlexibleInstances|ForeignFunctionInterface|FunctionalDependencies|GADTSyntax|GADTs|GHCForeignImportPrim|Generali[sz]edNewtypeDeriving|ImplicitParams|ImplicitPrelude|ImportQualifiedPost|ImpredicativeTypes|TypeFamilyDependencies|InstanceSigs|ApplicativeDo|InterruptibleFFI|JavaScriptFFI|KindSignatures|LambdaCase|LiberalTypeSynonyms|MagicHash|MonadComprehensions|MonoLocalBinds|MonomorphismRestriction|MultiParamTypeClasses|MultiWayIf|NumericUnderscores|NPlusKPatterns|NamedFieldPuns|NamedWildCards|NegativeLiterals|HexFloatLiterals|NondecreasingIndentation|NumDecimals|OverloadedLabels|OverloadedLists|OverloadedStrings|PackageImports|ParallelArrays|ParallelListComp|PartialTypeSignatures|PatternGuards|PatternSynonyms|PolyKinds|PolymorphicComponents|QuantifiedConstraints|PostfixOperators|QuasiQuotes|Rank2Types|RankNTypes|RebindableSyntax|RecordWildCards|RecursiveDo|RelaxedLayout|RoleAnnotations|ScopedTypeVariables|StandaloneDeriving|StarIsType|StaticPointers|Strict|StrictData|TemplateHaskell|TemplateHaskellQuotes|StandaloneKindSignatures|TraditionalRecordSyntax|TransformListComp|TupleSections|TypeApplications|TypeInType|TypeFamilies|TypeOperators|TypeSynonymInstances|UnboxedTuples|UnboxedSums|UndecidableInstances|UndecidableSuperClasses|UnicodeSyntax|UnliftedFFITypes|UnliftedNewtypes|ViewPatterns))","dgv")},{include:"#comma"}]},{begin:new RegExp("\\b(?<!')(SPECIALI[SZ]E)(?:\\p{space}*(\\[[^\\[\\]]*\\])?\\p{space}*|\\p{space}+)(instance)\\b(?!')","dgiv"),beginCaptures:{1:{name:"keyword.other.preprocessor.pragma.haskell"},2:{patterns:[{include:"#inline_phase"}]},3:{name:"keyword.other.instance.haskell"}},end:new RegExp("(?=#-\\})","dgv"),patterns:[{include:"#type_signature"}]},{begin:new RegExp("\\b(?<!')(SPECIALI[SZ]E)\\b(?!')(?:\\p{space}+(INLINE)\\b(?!'))?\\p{space}*(\\[[^\\[\\]]*\\])?\\p{space}*","dgiv"),beginCaptures:{1:{name:"keyword.other.preprocessor.pragma.haskell"},2:{name:"keyword.other.preprocessor.pragma.haskell"},3:{patterns:[{include:"#inline_phase"}]}},end:new RegExp("(?=#-\\})","dgv"),patterns:[{include:"$self"}]},{match:new RegExp("\\b(?<!')(LANGUAGE|OPTIONS_GHC|INCLUDE|MINIMAL|UNPACK|OVERLAPS|INCOHERENT|NOUNPACK|SOURCE|OVERLAPPING|OVERLAPPABLE|INLINE|NOINLINE|INLINE?ABLE|CONLIKE|LINE|COLUMN|RULES|COMPLETE)\\b(?!')","dgiv"),name:"keyword.other.preprocessor.haskell"},{begin:new RegExp("\\b(DEPRECATED|WARNING)\\b","dgiv"),beginCaptures:{1:{name:"keyword.other.preprocessor.pragma.haskell"}},end:new RegExp("(?=#-\\})","dgv"),patterns:[{include:"#string_literal"}]}]},prefix_op:{patterns:[{captures:{1:{name:"punctuation.paren.haskell"},2:{name:"entity.name.function.infix.haskell"},3:{name:"punctuation.paren.haskell"}},match:new RegExp("(\\()\\p{space}*(?!(?:--+|\\.\\.)\\))(#+|[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]+(?<!#))\\p{space}*(\\))","dgv")}]},qualifier:{match:new RegExp("\\b(?<!')[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.","dgv"),name:"entity.name.namespace.haskell"},quasi_quote:{patterns:[{begin:new RegExp("(\\[)([edp])?(\\|\\|?)","dgv"),beginCaptures:{1:{name:"keyword.operator.quasi-quotation.begin.haskell"},2:{name:"entity.name.quasi-quoter.haskell"},3:{name:"keyword.operator.quasi-quotation.begin.haskell"}},end:new RegExp("\\3\\]()()()","dgv"),endCaptures:{0:{name:"keyword.operator.quasi-quotation.end.haskell"}},name:"meta.quasi-quotation.haskell",patterns:[{include:"$self"}]},{begin:new RegExp("(\\[)(t)(\\|\\|?)","dgv"),beginCaptures:{1:{name:"keyword.operator.quasi-quotation.begin.haskell"},2:{name:"entity.name.quasi-quoter.haskell"},3:{name:"keyword.operator.quasi-quotation.begin.haskell"}},end:new RegExp("\\3\\]()()()","dgv"),endCaptures:{0:{name:"keyword.operator.quasi-quotation.end.haskell"}},name:"meta.quasi-quotation.haskell",patterns:[{include:"#type_signature"}]},{begin:new RegExp("(\\[)(?:(\\$\\$)|(\\$))?([[^\\p{space}\\p{S}\\p{P}]\\.'_]*)(\\|\\|?)","dgv"),beginCaptures:{1:{name:"keyword.operator.quasi-quotation.begin.haskell"},2:{name:"keyword.operator.prefix.double-dollar.haskell"},3:{name:"keyword.operator.prefix.dollar.haskell"},4:{name:"entity.name.quasi-quoter.haskell",patterns:[{include:"#qualifier"}]},5:{name:"keyword.operator.quasi-quotation.begin.haskell"}},end:new RegExp("\\5\\]()()()()()","dgv"),endCaptures:{0:{name:"keyword.operator.quasi-quotation.end.haskell"}},name:"meta.quasi-quotation.haskell"}]},record:{begin:new RegExp("(\\{)(?!-)","dgv"),beginCaptures:{1:{name:"punctuation.brace.haskell"}},end:new RegExp("(?<!-)(\\})","dgv"),endCaptures:{1:{name:"punctuation.brace.haskell"}},name:"meta.record.haskell",patterns:[{include:"#comment_like"},{include:"#record_field"}]},record_decl:{begin:new RegExp("(\\{)(?!-)","dgv"),beginCaptures:{1:{name:"punctuation.brace.haskell"}},end:new RegExp("(?<!-)(\\})","dgv"),endCaptures:{1:{name:"punctuation.brace.haskell"}},name:"meta.record.definition.haskell",patterns:[{include:"#comment_like"},{include:"#record_decl_field"}]},record_decl_field:{begin:new RegExp("(?:([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)|(\\()\\p{space}*([[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]+)\\p{space}*(\\)))","dgv"),beginCaptures:{1:{name:"variable.other.member.definition.haskell"},2:{name:"punctuation.paren.haskell"},3:{name:"variable.other.member.definition.haskell"},4:{name:"punctuation.paren.haskell"}},end:new RegExp("(,)|(?=\\})","dgv"),endCaptures:{1:{name:"punctuation.comma.haskell"}},patterns:[{include:"#comment_like"},{include:"#comma"},{include:"#double_colon"},{include:"#type_signature"},{include:"#record_decl_field"}]},record_field:{patterns:[{begin:new RegExp("(?:([\\p{Ll}\\p{Lu}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\.']*)|(\\()\\p{space}*([[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]+)\\p{space}*(\\)))","dgv"),beginCaptures:{1:{name:"variable.other.member.haskell",patterns:[{include:"#qualifier"}]},2:{name:"punctuation.paren.haskell"},3:{name:"variable.other.member.haskell"},4:{name:"punctuation.paren.haskell"}},end:new RegExp("(,)|(?=\\})","dgv"),endCaptures:{1:{name:"punctuation.comma.haskell"}},patterns:[{include:"#comment_like"},{include:"#comma"},{include:"$self"}]},{include:"#record_wildcard"}]},record_wildcard:{captures:{1:{name:"variable.other.member.wildcard.haskell"}},match:new RegExp("(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(\\.\\.)(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])","dgv")},reserved_symbol:{patterns:[{captures:{1:{name:"keyword.operator.double-dot.haskell"},2:{name:"keyword.operator.colon.haskell"},3:{name:"keyword.operator.eq.haskell"},4:{name:"keyword.operator.lambda.haskell"},5:{name:"keyword.operator.pipe.haskell"},6:{name:"keyword.operator.arrow.left.haskell"},7:{name:"keyword.operator.arrow.haskell"},8:{name:"keyword.operator.arrow.left.tail.haskell"},9:{name:"keyword.operator.arrow.left.tail.double.haskell"},10:{name:"keyword.operator.arrow.tail.haskell"},11:{name:"keyword.operator.arrow.tail.double.haskell"},12:{name:"keyword.other.forall.haskell"}},match:new RegExp("(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(?:(\\.\\.)|(:)|(=)|(\\\\)|(\\|)|(<-|←)|(->|→)|(-<|↢)|(-<<|⤛)|(>-|⤚)|(>>-|⤜)|(∀))(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])","dgv")},{captures:{1:{name:"keyword.operator.postfix.hash.haskell"}},match:new RegExp("(?<=[[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{S}\\p{P}]&&[^\\#\\,\\;\\[\\`\\{]])(#+)(?![[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{S}\\p{P}]&&[^\\)\\,\\;\\]\\`\\}]])","dgv")},{captures:{1:{name:"keyword.operator.infix.tight.at.haskell"}},match:new RegExp("(?<=[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\)\\}\\]])(@)(?=[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\(\\[\\{])","dgv")},{captures:{1:{name:"keyword.operator.prefix.tilde.haskell"},2:{name:"keyword.operator.prefix.bang.haskell"},3:{name:"keyword.operator.prefix.minus.haskell"},4:{name:"keyword.operator.prefix.dollar.haskell"},5:{name:"keyword.operator.prefix.double-dollar.haskell"}},match:new RegExp("(?<![[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\p{S}\\p{P}]&&[^\\(\\,\\;\\[\\`\\{]])(?:(~)|(!)|(-)|(\\$)|(\\$\\$))(?=[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}\\(\\{\\[])","dgv")}]},role_annotation:{patterns:[{begin:new RegExp("^(\\p{space}*)(type)\\p{space}+(role)\\b(?!')","dgv"),beginCaptures:{2:{name:"keyword.other.type.haskell"},3:{name:"keyword.other.role.haskell"}},end:new RegExp("(?=[\\}\\;])|^(?!\\1\\p{space}+\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$)))()","dgv"),name:"meta.role-annotation.haskell",patterns:[{include:"#comment_like"},{include:"#type_constructor"},{captures:{1:{name:"keyword.other.role.$1.haskell"}},match:new RegExp("\\b(?<!')(nominal|representational|phantom)\\b(?!')","dgv")}]}]},start_type_signature:{patterns:[{begin:new RegExp("^(\\p{space}*)(::|∷)(?![[\\p{S}\\p{P}]&&[^\\(\\,\\;\\[\\`\\{_\"']])\\p{space}*","dgv"),beginCaptures:{2:{name:"keyword.operator.double-colon.haskell"}},end:new RegExp("(?=#?\\)|[\\]\\,]|(?<!')\\b(in|then|else|of)\\b(?!')|(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(?:([\\\\λ])|(<-|←)|(=)|(-<|↢)|(-<<|⤛))([\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"'[^\\p{S}\\p{P}]])|([\\#\\@])-\\}|(?=[\\}\\;])|^(?!(?!)\\p{space}*\\P{space}|\\p{space}*(?:(?=\\n?$)|\\{-[^\\@]|--+(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\{\\}\\`_\"']])[^\\n]*(?=\\n?$))))","dgv"),name:"meta.type-declaration.haskell",patterns:[{include:"#type_signature"}]},{begin:new RegExp("(?<![[\\p{S}\\p{P}]&&[^\\(\\,\\;\\[\\`\\{_\"']])(::|∷)(?![[\\p{S}\\p{P}]&&[^\\(\\,\\;\\[\\`\\{_\"']])","dgv"),beginCaptures:{1:{name:"keyword.operator.double-colon.haskell"}},end:new RegExp("(?=#?\\)|[\\]\\,]|\\b(?<!')(in|then|else|of)\\b(?!')|([\\#\\@])-\\}|(?<![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])(?:([\\\\λ])|(<-|←)|(=)|(-<|↢)|(-<<|⤛))([\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"'[^\\p{S}\\p{P}]])|(?=[\\}\\;])|(?=\\n?$))","dgv"),patterns:[{include:"#type_signature"}]}]},string_literal:{begin:new RegExp('"',"dgv"),beginCaptures:{0:{name:"punctuation.definition.string.begin.haskell"}},end:new RegExp('"',"dgv"),endCaptures:{0:{name:"punctuation.definition.string.end.haskell"}},name:"string.quoted.double.haskell",patterns:[{match:new RegExp(`\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\"'\\&])`,"dgv"),name:"constant.character.escape.haskell"},{match:new RegExp("\\\\(?:o[0-7]+|x\\p{AHex}+|[0-9]+)","dgv"),name:"constant.character.escape.octal.haskell"},{match:new RegExp("\\\\\\^[A-Z\\@\\[\\]\\\\\\^_]","dgv"),name:"constant.character.escape.control.haskell"},{begin:new RegExp("\\\\\\p{space}","dgv"),beginCaptures:{0:{name:"constant.character.escape.begin.haskell"}},end:new RegExp("\\\\","dgv"),endCaptures:{0:{name:"constant.character.escape.end.haskell"}},patterns:[{match:new RegExp("\\P{space}+","dgv"),name:"invalid.illegal.character-not-allowed-here.haskell"}]}]},type_application:{patterns:[{begin:new RegExp(`(?<=[\\p{space}\\,\\;\\[\\]\\{\\}"])(@)(')?(\\()`,"dgv"),beginCaptures:{1:{name:"keyword.operator.prefix.at.haskell"},2:{name:"keyword.operator.promotion.haskell"},3:{name:"punctuation.paren.haskell"}},end:new RegExp("\\)","dgv"),endCaptures:{0:{name:"punctuation.paren.haskell"}},name:"meta.type-application.haskell",patterns:[{include:"#type_signature"}]},{begin:new RegExp(`(?<=[\\p{space}\\,\\;\\[\\]\\{\\}"])(@)(')?(\\[)`,"dgv"),beginCaptures:{1:{name:"keyword.operator.prefix.at.haskell"},2:{name:"keyword.operator.promotion.haskell"},3:{name:"punctuation.bracket.haskell"}},end:new RegExp("\\]","dgv"),endCaptures:{0:{name:"punctuation.bracket.haskell"}},name:"meta.type-application.haskell",patterns:[{include:"#type_signature"}]},{begin:new RegExp('(?<=[\\p{space}\\,\\;\\[\\]\\{\\}"])(@)(?=")',"dgv"),beginCaptures:{1:{name:"keyword.operator.prefix.at.haskell"}},end:new RegExp('(?<=")',"dgv"),name:"meta.type-application.haskell",patterns:[{include:"#string_literal"}]},{begin:new RegExp(`(?<=[\\p{space}\\,\\;\\[\\]\\{\\}"])(@)(?=[\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'])`,"dgv"),beginCaptures:{1:{name:"keyword.operator.prefix.at.haskell"}},end:new RegExp("(?![\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}'])","dgv"),name:"meta.type-application.haskell",patterns:[{include:"#type_signature"}]}]},type_constructor:{patterns:[{captures:{1:{name:"keyword.operator.promotion.haskell"},2:{name:"entity.name.namespace.haskell"},3:{name:"storage.type.haskell"}},match:new RegExp("(')?((?:\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.)*)(\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)","dgv")},{captures:{1:{name:"keyword.operator.promotion.haskell"},2:{name:"punctuation.paren.haskell"},3:{name:"entity.name.namespace.haskell"},4:{name:"storage.type.operator.haskell"},5:{name:"punctuation.paren.haskell"}},match:new RegExp("(')?(\\()\\p{space}*((?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.)*)([[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]+)\\p{space}*(\\))","dgv")}]},type_operator:{patterns:[{captures:{1:{name:"keyword.operator.promotion.haskell"},2:{name:"entity.name.namespace.haskell"},3:{name:"storage.type.operator.infix.haskell"}},match:new RegExp("(?:(?<!')('))?((?:\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.)*)(?![\\#\\@]?-\\})(#+|[[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']]+(?<!#))","dgv")},{captures:{1:{name:"keyword.operator.promotion.haskell"},2:{name:"punctuation.backtick.haskell"},3:{name:"entity.name.namespace.haskell"},4:{name:"storage.type.infix.haskell"},5:{name:"punctuation.backtick.haskell"}},match:new RegExp("(')?(`)((?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*\\.)*)([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)(`)","dgv")}]},type_signature:{patterns:[{include:"#comment_like"},{captures:{1:{name:"keyword.operator.promotion.haskell"},2:{name:"punctuation.paren.haskell"},3:{name:"punctuation.paren.haskell"}},match:new RegExp("(')?(\\()\\p{space}*(\\))","dgv"),name:"support.constant.unit.haskell"},{captures:{1:{name:"punctuation.paren.haskell"},2:{name:"keyword.operator.hash.haskell"},3:{name:"keyword.operator.hash.haskell"},4:{name:"punctuation.paren.haskell"}},match:new RegExp("(\\()(#)\\p{space}*(#)(\\))","dgv"),name:"support.constant.unit.unboxed.haskell"},{captures:{1:{name:"keyword.operator.promotion.haskell"},2:{name:"punctuation.paren.haskell"},3:{name:"punctuation.paren.haskell"}},match:new RegExp("(')?(\\()\\p{space}*,[\\p{space}\\,]*(\\))","dgv"),name:"support.constant.tuple.haskell"},{captures:{1:{name:"punctuation.paren.haskell"},2:{name:"keyword.operator.hash.haskell"},3:{name:"keyword.operator.hash.haskell"},4:{name:"punctuation.paren.haskell"}},match:new RegExp("(\\()(#)\\p{space}*(#)(\\))","dgv"),name:"support.constant.unit.unboxed.haskell"},{captures:{1:{name:"punctuation.paren.haskell"},2:{name:"keyword.operator.hash.haskell"},3:{name:"keyword.operator.hash.haskell"},4:{name:"punctuation.paren.haskell"}},match:new RegExp("(\\()(#)\\p{space}*,[\\p{space}\\,]*(#)(\\))","dgv"),name:"support.constant.tuple.unboxed.haskell"},{captures:{1:{name:"keyword.operator.promotion.haskell"},2:{name:"punctuation.bracket.haskell"},3:{name:"punctuation.bracket.haskell"}},match:new RegExp("(')?(\\[)\\p{space}*(\\])","dgv"),name:"support.constant.empty-list.haskell"},{include:"#integer_literals"},{match:new RegExp("(::|∷)(?![[\\p{S}\\p{P}]&&[^\\(\\)\\,\\;\\[\\]\\`\\{\\}_\"']])","dgv"),name:"keyword.operator.double-colon.haskell"},{include:"#forall"},{match:new RegExp("=>|⇒","dgv"),name:"keyword.operator.big-arrow.haskell"},{include:"#string_literal"},{match:new RegExp("'[^']'","dgv"),name:"invalid"},{include:"#type_application"},{include:"#reserved_symbol"},{include:"#type_operator"},{include:"#type_constructor"},{begin:new RegExp("(\\()(#)","dgv"),beginCaptures:{1:{name:"punctuation.paren.haskell"},2:{name:"keyword.operator.hash.haskell"}},end:new RegExp("(#)(\\))","dgv"),endCaptures:{1:{name:"keyword.operator.hash.haskell"},2:{name:"punctuation.paren.haskell"}},patterns:[{include:"#comma"},{include:"#type_signature"}]},{begin:new RegExp("(')?(\\()","dgv"),beginCaptures:{1:{name:"keyword.operator.promotion.haskell"},2:{name:"punctuation.paren.haskell"}},end:new RegExp("(\\))","dgv"),endCaptures:{1:{name:"punctuation.paren.haskell"}},patterns:[{include:"#comma"},{include:"#type_signature"}]},{begin:new RegExp("(')?(\\[)","dgv"),beginCaptures:{1:{name:"keyword.operator.promotion.haskell"},2:{name:"punctuation.bracket.haskell"}},end:new RegExp("(\\])","dgv"),endCaptures:{1:{name:"punctuation.bracket.haskell"}},patterns:[{include:"#comma"},{include:"#type_signature"}]},{include:"#type_variable"}]},type_variable:{match:new RegExp("\\b(?<!')(?!(?:forall|deriving)\\b(?!'))[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*","dgv"),name:"variable.other.generic-type.haskell"},where:{patterns:[{begin:new RegExp("(?<!')\\b(where)\\p{space}*(\\{)(?!-)","dgv"),beginCaptures:{1:{name:"keyword.other.where.haskell"},2:{name:"punctuation.brace.haskell"}},end:new RegExp("(\\})","dgv"),endCaptures:{1:{name:"punctuation.brace.haskell"}},patterns:[{include:"$self"},{match:new RegExp(";","dgv"),name:"punctuation.semicolon.haskell"}]},{match:new RegExp("\\b(?<!')(where)\\b(?!')","dgv"),name:"keyword.other.where.haskell"}]}},scopeName:"source.haskell",embeddedLangs:void 0,aliases:["hs"]}),t=[a];export{t as default};
